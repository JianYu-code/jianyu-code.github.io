<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C语言</title>
      <link href="2021/05/04/c-yu-yan/"/>
      <url>2021/05/04/c-yu-yan/</url>
      
        <content type="html"><![CDATA[<p>C语言是一门面向过程的、抽象化的通用程序设计语言，广泛应用于底层开发。C语言能以简易的方式编译、处理低级存储器。C语言是仅产生少量的机器语言以及不需要任何运行环境支持便能运行的高效率程序设计语言。尽管C语言提供了许多低级处理的功能，但仍然保持着跨平台的特性，以一个标准规格写出的C语言程序可在包括类似嵌入式处理器以及超级计算机等作业平台的许多计算机平台上进行编译。</p><h1 id="一·程序设计和C语言"><a href="#一·程序设计和C语言" class="headerlink" title="一·程序设计和C语言"></a>一·程序设计和C语言</h1><h2 id="1-1、什么是计算机程序"><a href="#1-1、什么是计算机程序" class="headerlink" title="1.1、什么是计算机程序"></a>1.1、什么是计算机程序</h2><h3 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h3><blockquote><p>1、计算机的每一个操作都是根据人们事先指定的指令进行的</p><p>2、图灵——理论计算机（图灵机）设计者  程序运行——二进制</p><p>3、冯·诺依曼——计算机奠基人   五大组成部分（CPU（运算器&amp;控制器）、输入输出设备、存储设备）</p></blockquote><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><blockquote><p>1、一组计算机能识别和执行的指令。一个特定的指令序列用来完成一定的功能</p><p>2、一个软件包含了很多程序（一个特定的功能称为程序）</p></blockquote><blockquote><p>总之，计算机的一切都是由程序来控制，离开程序，计算机将一事无成</p></blockquote><h2 id="1-2、什么是计算机语言"><a href="#1-2、什么是计算机语言" class="headerlink" title="1.2、什么是计算机语言"></a>1.2、什么是计算机语言</h2><blockquote><p><strong>1、早期——机器语言（二进制写的）</strong><br>    进制转换<br>短除法<br>十进制-&gt;其他进制</p><p>例：十进制：38 得二进制：？ </p><p>用38每次都除以2，并记录余数，除到最后将余数从新至旧摆列，得：100110</p><p>其他进制-&gt;十进制</p><p>例：1011 = 1x2的3次方+0x2的2次方+1x2的1次方+1x2的0次方，得十进制：11</p><p>二进制-&gt;八进制(八进制-&gt;二进制)<br>三合一法<br>例：11010111<br>将这个数，从右至左，每取三位组成一位，被新组成的一位按照二进制计算，然后将得到的结果从新至旧摆列，11,010,111(3,2,7)得：八进制：327</p><p>反之，就是将八进制的每一位分解成二进制数(三位，不够用0占)，然后从新至旧摆列3,2,7(011,010,111)，得二进制：11010111（可以将第一位的0省略）</p><p>二进制-&gt;十六进制（十六进制-&gt;二进制）<br>四合一法<br>例：100111001，从左至右取四位为新一位，0001,0011,1001(1,3,9),然后将得到的几个结果从新至旧摆列，得十六进制：139</p><p>反之 就是取一合四，1,3,9(0001,0011,1001)，从新至旧摆列，得二进制：100111001</p><p>进制取值范围：<br>二进制：0<del>1<br>十进制：0</del>9<br>八进制：0<del>7<br>十六进制：0</del>9 &amp; A~F</p><p>ASCII编码：<br>掌握a(097)<del>z(122) &amp; A(065)</del>Z(090)<br>大小写转换：大-&gt;小：A+‘32’<br>小-&gt;大：a-‘32’</p><p><strong>2、早期——机器语言（二进制写的）</strong><br>    进制转换<br>短除法<br>十进制-&gt;其他进制</p><p>例：十进制：38 得二进制：？ </p><p>用38每次都除以2，并记录余数，除到最后将余数从新至旧摆列，得：100110</p><p>其他进制-&gt;十进制</p><p>例：1011 = 1x2的3次方+0x2的2次方+1x2的1次方+1x2的0次方，得十进制：11</p><p>二进制-&gt;八进制(八进制-&gt;二进制)<br>三合一法<br>例：11010111<br>将这个数，从右至左，每取三位组成一位，被新组成的一位按照二进制计算，然后将得到的结果从新至旧摆列，11,010,111(3,2,7)得：八进制：327</p><p>反之，就是将八进制的每一位分解成二进制数(三位，不够用0占)，然后从新至旧摆列3,2,7(011,010,111)，得二进制：11010111（可以将第一位的0省略）</p><p>二进制-&gt;十六进制（十六进制-&gt;二进制）<br>四合一法<br>例：100111001，从左至右取四位为新一位，0001,0011,1001(1,3,9),然后将得到的几个结果从新至旧摆列，得十六进制：139</p><p>反之 就是取一合四，1,3,9(0001,0011,1001)，从新至旧摆列，得二进制：100111001</p><p>进制取值范围：<br>二进制：0<del>1<br>十进制：0</del>9<br>八进制：0<del>7<br>十六进制：0</del>9 &amp; A~F</p><p>ASCII编码：<br>掌握a(097)<del>z(122) &amp; A(065)</del>Z(090)<br>大小写转换：大-&gt;小：A+‘32’<br>小-&gt;大：a-‘32’</p><p><strong>3、中期——汇编语言（助记符代替某些指令，属于低级语言）</strong></p><p><strong>4、后期——高级语言（接近自然语言&amp;数学语言）</strong><br>    高级语言出现了两个阶段：<br>1、结构化程序高级语言：C语言<br> 早期，适用于较小的程序设计<br>2、面向对象高级程序设计语言：C++、java…..<br> 后期，适用于大型化、系统化的程序开发</p><p>计算机也不是能直接识别高级语言的，需要“翻译”，用一种称为“编译程序”的软件把用高级语言编写的程序（源程序）（文件名.c）转换为机器指令的程序（目标程序）（二进制代码），然后计算机执行机器指令程序，最后得到结果。</p><p>“翻译”有两种：<br>1、解释<br> java:使用虚拟机进行解释，相对运行效率低<br>2、编译<br> C、C++语言是编译性语言，相对运行效率高</p></blockquote><h2 id="1-3、C语言的发展及特点"><a href="#1-3、C语言的发展及特点" class="headerlink" title="1.3、C语言的发展及特点"></a>1.3、C语言的发展及特点</h2><blockquote><p>1、Unix-&gt;C，Unix是ios和安卓的母本</p><p>2、C语言标准：C89/C99</p><p>3、C语言特点<br> ①、简洁紧凑 ，方便灵活<br> C语言一共有37个关键字，9种控制语句，程序的书写自由，主要用小写字母表示<br> C语言不直接提供输入输出语句，有关的操作语句是由库函数来实现</p><p>②、运算符丰富<br>    共有34种运算符</p><p>③、数据类型丰富<br> C语言提供的数据类型包括 整型、浮点型、字符型、数组类型、指针类型、结构体类型和共用体类型等；C99又扩充了复数浮点型、超长整型（long long）和布尔类型（bool）等。</p><p>④、结构化控制语句<br> if … else、for、while、do….while、switch<br> C语言用函数作为程序的模块单位（C语言的基本组成单位是函数）<br> C语言是完全模块化和结构化的语言（函数=模块，模块=函数）</p><p>⑤、程序设计自由度大</p><p>⑥、直接访问硬件进行位操作<br> C语言既具有高级语言的功能，又具有低级语言的许多功能，可用来编写系统软件</p><p>⑦、可移植性较好（相对来说）</p><p>⑧、代码质量高，执行效率高</p></blockquote><h2 id="1-4-1、掌握C语言的结构"><a href="#1-4-1、掌握C语言的结构" class="headerlink" title="1.4.1、掌握C语言的结构"></a>1.4.1、掌握C语言的结构</h2><blockquote><p><strong>main必须且唯一</strong></p><p><strong>结构</strong><br>①、预处理 include “stdio.h”<br>②、main()<br>③、{  //开始<br>④、语句   ;  分号作为语句结束的标志<br>⑤、}  //结束</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="2021/04/27/shu-ju-jie-gou/"/>
      <url>2021/04/27/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>数据结构(data structure)是带有结构特性的数据元素的集合，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带“结构”的数据元素的集合。“结构”就是指数据元素之间存在的关系，分为逻辑结构和存储结构。<br><img src="https://cdn.jsdelivr.net/gh/JianYu-code/image/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg"></p><h1 id="第一章·绪论"><a href="#第一章·绪论" class="headerlink" title="第一章·绪论"></a>第一章·绪论</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><blockquote><p>1、数据：数据是信息的载体，是用户输入字符能够被计算机所识别的符号集合</p><p>2、数据元素：数据元素是数据的基本单位，作为一个整体来看待和处理，一个数据元素是由多个数据项组成的</p><p>3、数据项：数据项是数据的最小单位</p><p>4、数据对象：数据对象是相同类型的数据元素的有限集合，是数据的一个子集</p><p>5、数据结构：数据结构是指数据之间存在一种或多种特定关系的数据元素集合</p><p>6、数据结构的三要素：逻辑结构丶存储结构丶数据的运算</p><p>7、逻辑结构：集合丶线性结构丶树形结构丶图状结构</p><p>8、线性结构：线性表、栈、队列</p><p>9、非线性结构：树、图、集合</p><p>10、存储结构：顺序存储丶链式存储丶索引存储丶散列存储</p><p>11、抽象数据类型：是一个数学模型以及定义在该模型上的一组操作，抽象数据类型的定义取决于它的一组逻辑特性，而与其在计算机内部如何表示和实现无关</p><p>12、抽象数据类型三元组表示法：ADT=(D，S，P)，D是数据对象，S是D上的关系集，P是对D的基本操作集</p><p>13、算法：是对特定问题的求解步骤，指令集</p><p>14、算法的五大特性：有穷性丶确定性丶可行性（有效性）丶输入（0<del>+无穷）丶输出（1</del>+无穷）</p><p>15、算法的设计目标：正确性丶可读性丶健壮性丶算法效率与存储量需求（高效性）</p><p>16、算法分析方法：事后统计、事前分析估算</p><p>17、算法分析：时间复杂度丶空间复杂度</p><p>18、时间复杂度比较：O(1)＜O(log2n)＜O(n)＜O(nlog2n)＜O(n²)＜O(n³)&lt; O(2 n方)&lt; O(n!)&lt; O(nn方)</p></blockquote><h1 id="第二章·线性表"><a href="#第二章·线性表" class="headerlink" title="第二章·线性表"></a>第二章·线性表</h1><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><blockquote><p>1、线性表是具有相同数据类型的n个(n＞=0)数据元素的有限序列，其中n为表长，当n=0时为空表，</p><p>2、除第一个元素外，每一个元素都有且仅有一个直接前驱，除最后一个元素外，每个元素都有且仅有一个直接后继</p></blockquote><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><blockquote><p>1、顺序表：是指逻辑上相邻的两个元素，在物理上也相邻</p><p>2、顺序表和链表的比较：顺序表可以随机存取也可以顺序存取；链表只能从表头顺序存取</p><p>3、使用数组定义线性表，要知道数组可以静态分配；也可以动态分配；动态分配使用malloc函数</p><p>4、顺序表的优点是：可随机存取，存储密度高；顺序表的缺点是：要求大片连续空间，改变容量不方便</p></blockquote><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><blockquote><p>1、在每个结点中除了包含数据之外，还包含一个指针域，用来指向其后继结点</p><p>2、带头结点的单链表头指针始终不等于NULL，head-&gt;next等于NULL时，链表为空</p><p>3、不带头结点的单链表头结点直接指向开始结点，head等于NULL时，链表为空</p><p>4、单链表的优点：不要求一大片连续的空间，改变容量方便；单链表的缺点：不可随机存取，要花费一定空间存放指针</p></blockquote><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><blockquote><p>1、带头结点的双链表，当head-&gt;next为NULL时链表为空</p><p>2、不带头结点的双链表，当head为NULL时链表为空</p><p>3、初始化时，双链表的前驱指针和后继指针都指向NULL</p></blockquote><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><blockquote><p>1、循环单链表和循环双链表都是由对应的单链表和双链表改造而来的，只要在终端结点和头结点(或开始结点)间建立联系即可。</p><p>2、循环双链表头结点（或开始结点）的prior指针指向终端结点；终端结点的next指针指向头结点</p><p>3、循环单链表（带头结点），head=head-&gt;next时，为空链表</p><p>4、循环单链表（不带头结点），head = NULL时，为空链表</p><p>5、循环双链表（带头结点），head = head-&gt;next 或 head = head-&gt;prior时，为空链表</p><p>6、循环双链表（不带头结点），head=NULL时，为空链表</p></blockquote><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><blockquote><p>1、静态链表：分配一整片连续的内存空间，各个结点集中安置</p><p>2、0号结点充当头结点，游标为-1表示最后一个结点</p><p>3、每个数据元素4B，每个游标4B，（每个结点共8B）设起始地址为addr；找某个元素的地址为：addr+8*下标</p></blockquote><h2 id="2、操作"><a href="#2、操作" class="headerlink" title="2、操作"></a>2、操作</h2><h3 id="顺序表-1"><a href="#顺序表-1" class="headerlink" title="顺序表"></a>顺序表</h3><h4 id="顺序表——静态分配"><a href="#顺序表——静态分配" class="headerlink" title="顺序表——静态分配"></a>顺序表——静态分配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> ElemType data[MAXSIZE];</span><br><span class="line"> int length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;基本操作——初始化一个顺序表</span><br><span class="line">void InitList(SqList &amp;L)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    L.data[i] &#x3D; 0;</span><br><span class="line">    L.length &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"> SqList L;</span><br><span class="line"> InitList(L);</span><br><span class="line"> &#x2F;&#x2F;.....一系列操作</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顺序表——动态分配"><a href="#顺序表——动态分配" class="headerlink" title="顺序表——动态分配"></a>顺序表——动态分配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#define INITSIZE 10 &#x2F;&#x2F;顺序表初始长度</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> ElemType *data;</span><br><span class="line"> int MaxSize; &#x2F;&#x2F;顺序表的最大容量</span><br><span class="line"> int length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;基本操作——初始化一个顺序表</span><br><span class="line">void InitList(SeqList &amp;L)&#123;</span><br><span class="line"> L.data &#x3D; (ElemType *)malloc(sizeof(ElemType)*INITSIZE);</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    L.data[i] &#x3D; 0;</span><br><span class="line"> L.length &#x3D; 0;</span><br><span class="line"> L.MaxSize &#x3D; INITSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加动态数组的长度</span><br><span class="line">void IncreaseSize(SeqList &amp;L,int len)&#123;</span><br><span class="line"> int *p &#x3D; L.data;</span><br><span class="line"> L.data &#x3D; (int *)malloc((L.MaxSize+len)*sizeof(int));</span><br><span class="line"> for(int i &#x3D; 0;i&lt;L.length;i++)</span><br><span class="line">    L.data[i] &#x3D; p[i];</span><br><span class="line"> L.MaxSize &#x3D; L.MaxSize+len;</span><br><span class="line"> free(p);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line"> SeqList L;</span><br><span class="line"> InitList(L);</span><br><span class="line"> &#x2F;&#x2F;.....一系列操作</span><br><span class="line"> IncreaseSize(L,5);</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作</span><br><span class="line">bool InsertList(SqList &amp;L,int e,int i)&#123;</span><br><span class="line"> if(i&lt;1 || i&gt;L.length+1)</span><br><span class="line">    return false;</span><br><span class="line"> if(L.length&gt;&#x3D;MAXSIZE)</span><br><span class="line">    return false;</span><br><span class="line"> for(int j &#x3D; L.length;j&gt;&#x3D;i;j--)</span><br><span class="line">    L.data[j] &#x3D; L.data[j-1];</span><br><span class="line"> L.data[i-1] &#x3D; e;</span><br><span class="line"> L.length++;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line">时间复杂度为：O(n)</span><br></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作</span><br><span class="line">bool DeleteList(SqList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1||i&gt;L.length)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; L.data[i-1];</span><br><span class="line"> for(int j &#x3D; i;j&lt;&#x3D;L.length;j++)</span><br><span class="line">    L.data[j-1] &#x3D; L.data[j];</span><br><span class="line"> L.length--;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line">时间复杂度为：O(n)</span><br></pre></td></tr></table></figure><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;按位查找</span><br><span class="line"> int GetElem(SqList L,int i)&#123;</span><br><span class="line">  return L.data[i-1];</span><br><span class="line"> &#125; </span><br><span class="line">时间复杂度：O(1)</span><br></pre></td></tr></table></figure><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;按值查找</span><br><span class="line"> int LocateElem(SqList L,int e)&#123;</span><br><span class="line">  for(int i &#x3D; 0;i&lt;L.length;i++)</span><br><span class="line">    if(L.data[i]&#x3D;&#x3D;e)</span><br><span class="line">        return i+1;</span><br><span class="line">  return 0;</span><br><span class="line"> &#125;</span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h3 id="单链表-1"><a href="#单链表-1" class="headerlink" title="单链表"></a>单链表</h3><blockquote><p>注意：带头结点代码中的L是指向头结点的，而L-&gt;next是指向首元结点（首个值结点）</p><p>不带头结点代码中的L是指向首元结点的。</p></blockquote><h4 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct LNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct LNode *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><h4 id="带头结点"><a href="#带头结点" class="headerlink" title="带头结点"></a>带头结点</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct LNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool InitList(LinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; (LNode *)malloc(sizeof(LNode));&#x2F;&#x2F;分配一个头结点</span><br><span class="line"> if(L&#x3D;&#x3D;NULL) &#x2F;&#x2F;内存不足，分配失败 </span><br><span class="line">    return false;</span><br><span class="line"> L-&gt;next &#x3D; NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 </span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line"> LinkList L;</span><br><span class="line"> InitList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入操作-1"><a href="#插入操作-1" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bool ListInsert(LinkList &amp;L,int i,ElemType e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *p; &#x2F;&#x2F;指针p指向当前被扫描到的结点 </span><br><span class="line"> int j &#x3D; 0; &#x2F;&#x2F;当前指向的是第几个结点 </span><br><span class="line"> p &#x3D; L; &#x2F;&#x2F;L指向头结点，头结点是第0个结点（不存数据）</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">     p &#x3D; p-&gt;next;</span><br><span class="line">     j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL) &#x2F;&#x2F;i值不合法 </span><br><span class="line">    return false;</span><br><span class="line"> LNode *s &#x3D; (LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;新的结点</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next &#x3D; s; &#x2F;&#x2F;将结点s连到p之后</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h5 id="删除操作-1"><a href="#删除操作-1" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bool ListDelete(LinkList &amp;L,int i,ElemType &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *p;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> p &#x3D; L;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">     p &#x3D; p-&gt;next;</span><br><span class="line">     j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> if(p-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *q &#x3D; p-&gt;next;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h5 id="按位查找-1"><a href="#按位查找-1" class="headerlink" title="按位查找"></a>按位查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LNode * GetElem(LinkList L,int i)&#123;</span><br><span class="line"> if(i&lt;0)</span><br><span class="line">    return NULL;</span><br><span class="line"> LNode *p;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> p &#x3D; L;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：平均O(n)</span><br></pre></td></tr></table></figure><h5 id="按值查找-1"><a href="#按值查找-1" class="headerlink" title="按值查找"></a>按值查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LNode * LocateElem(LinkList L,ElemType e)&#123;</span><br><span class="line"> LNode *p &#x3D; L-&gt;next;</span><br><span class="line"> &#x2F;&#x2F;从第一个结点开始查找数据域为e的结点 </span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; p-&gt;data!&#x3D;e)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line"> &#125;</span><br><span class="line"> return p;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度:平均O(n)</span><br></pre></td></tr></table></figure><h5 id="求表长"><a href="#求表长" class="headerlink" title="求表长"></a>求表长</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int Length(LinkList L)&#123;</span><br><span class="line"> LNode *p &#x3D; L;</span><br><span class="line"> int len &#x3D; 0;</span><br><span class="line"> while(p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line"> &#125;</span><br><span class="line"> return len;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：平均O(n)</span><br></pre></td></tr></table></figure><h5 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LinkList List_TailInsert(LinkList &amp;L)&#123;</span><br><span class="line"> int x;</span><br><span class="line"> L &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> LNode *s,*r &#x3D; L;</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> while(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    r-&gt;next &#x3D; s;</span><br><span class="line">    r &#x3D; s;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> &#125;</span><br><span class="line"> r-&gt;next &#x3D; NULL;</span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：O(n)</span><br></pre></td></tr></table></figure><h5 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LinkList List_HeadInsert(LinkList &amp;L)&#123;</span><br><span class="line"> LNode *s;</span><br><span class="line"> int x;</span><br><span class="line"> L &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> L-&gt;next &#x3D; NULL; &#x2F;&#x2F;初始为空链表</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> while(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    s-&gt;next &#x3D; L-&gt;next;</span><br><span class="line">    L-&gt;next &#x3D; s;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> &#125;</span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：O(n)</span><br></pre></td></tr></table></figure><h5 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(LinkList L)&#123;</span><br><span class="line"> if(L-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表的逆置"><a href="#链表的逆置" class="headerlink" title="链表的逆置"></a>链表的逆置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LinkList Inversion(LinkList L)&#123;</span><br><span class="line"> LNode *p,*r;</span><br><span class="line"> p &#x3D; L-&gt;next;  </span><br><span class="line"> L-&gt;next &#x3D; NULL; &#x2F;&#x2F;断链</span><br><span class="line"> while(p!&#x3D;NULL)&#123;</span><br><span class="line">    r &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; L-&gt;next;</span><br><span class="line">    L-&gt;next &#x3D; p;</span><br><span class="line">    p &#x3D; r;</span><br><span class="line"> &#125; </span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不带头结点"><a href="#不带头结点" class="headerlink" title="不带头结点"></a>不带头结点</h4><h5 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct LNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool InitList(LinkList &amp;L)&#123;</span><br><span class="line"> L&#x3D;NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line"> LinkList L;</span><br><span class="line"> InitList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入操作-2"><a href="#插入操作-2" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bool ListInsert(LinkList &amp;L,int i,ElemType e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;1)&#123;</span><br><span class="line">    LNode *s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"> LNode *p; &#x2F;&#x2F;指针p指向当前被扫描到的结点 </span><br><span class="line"> int j &#x3D; 1; &#x2F;&#x2F;当前指向的是第几个结点 </span><br><span class="line"> p &#x3D; L; &#x2F;&#x2F;L指向首元结点，首元结点是第1个结点</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL) &#x2F;&#x2F;i值不合法 </span><br><span class="line">    return false;</span><br><span class="line"> LNode *s &#x3D; (LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;新的结点</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next &#x3D; s; &#x2F;&#x2F;将结点s连到p之后</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h5 id="删除操作-2"><a href="#删除操作-2" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">bool ListDelete(LinkList &amp;L,int i,ElemType &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;&#x3D;1)&#123;</span><br><span class="line">    LNode *q &#x3D; L;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    L &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> LNode *p;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> p &#x3D; L;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> if(p-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *q &#x3D; p-&gt;next;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h5 id="按位查找-2"><a href="#按位查找-2" class="headerlink" title="按位查找"></a>按位查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LNode * GetElem(LinkList L,int i)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return NULL;</span><br><span class="line"> LNode *p;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> p &#x3D; L;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：平均O(n)</span><br></pre></td></tr></table></figure><h5 id="按值查找-2"><a href="#按值查找-2" class="headerlink" title="按值查找"></a>按值查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LNode * LocateElem(LinkList L,ElemType e)&#123;</span><br><span class="line"> LNode *p &#x3D; L;</span><br><span class="line"> if(p-&gt;data&#x3D;&#x3D;e)</span><br><span class="line">    return p;</span><br><span class="line"> else</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; p-&gt;data!&#x3D;e)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line"> &#125;</span><br><span class="line"> return p;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度:平均O(n)</span><br></pre></td></tr></table></figure><h5 id="求表长-1"><a href="#求表长-1" class="headerlink" title="求表长"></a>求表长</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int Length(LinkList L)&#123;</span><br><span class="line"> LNode *p &#x3D; L;</span><br><span class="line"> int len &#x3D; 0;</span><br><span class="line"> if(p!&#x3D;NULL)</span><br><span class="line">    len++;</span><br><span class="line"> while(p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line"> &#125;</span><br><span class="line"> return len;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：平均O(n)</span><br></pre></td></tr></table></figure><h5 id="尾插法建立单链表-1"><a href="#尾插法建立单链表-1" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">LinkList List_TailInsert(LinkList &amp;L)&#123;</span><br><span class="line"> int x;</span><br><span class="line"> LNode *s,*r&#x3D;L;</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> if(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    r &#x3D; s;</span><br><span class="line">&#125;</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> while(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    r-&gt;next &#x3D; s;</span><br><span class="line">    r &#x3D; s;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> &#125;</span><br><span class="line"> r-&gt;next &#x3D; NULL;</span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：O(n)</span><br></pre></td></tr></table></figure><h5 id="头插法建立单链表-1"><a href="#头插法建立单链表-1" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LinkList List_HeadInsert(LinkList &amp;L)&#123;</span><br><span class="line"> LNode *s,*r;</span><br><span class="line"> int x;</span><br><span class="line"> L &#x3D; NULL; &#x2F;&#x2F;初始化空链表</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> while(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    s-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> &#125;</span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判空-1"><a href="#判空-1" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(LinkList L)&#123;</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表的逆置-1"><a href="#链表的逆置-1" class="headerlink" title="链表的逆置"></a>链表的逆置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LinkList Inversion(LinkList L)&#123;</span><br><span class="line"> LNode *p,*r;</span><br><span class="line"> p &#x3D; L;  </span><br><span class="line"> L &#x3D; NULL; &#x2F;&#x2F;断链</span><br><span class="line"> while(p!&#x3D;NULL)&#123;</span><br><span class="line">    r &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; p;</span><br><span class="line">    p &#x3D; r;</span><br><span class="line"> &#125; </span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不分类操作"><a href="#不分类操作" class="headerlink" title="不分类操作"></a>不分类操作</h4><h5 id="结点的后插"><a href="#结点的后插" class="headerlink" title="结点的后插"></a>结点的后插</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool InsertNextNode(LNode *p;ElemType e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL) &#x2F;&#x2F;内存分配失败 </span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：O(1)</span><br></pre></td></tr></table></figure><h5 id="结点的前插"><a href="#结点的前插" class="headerlink" title="结点的前插"></a>结点的前插</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool InsertBeforeNode(LNode *p,ElemType e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> s-&gt;data &#x3D; p-&gt;data;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;data &#x3D; e;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：O(1)</span><br></pre></td></tr></table></figure><h5 id="结点的删除"><a href="#结点的删除" class="headerlink" title="结点的删除"></a>结点的删除</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteNode(LNode *p,ElemType &amp;e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *q &#x3D; p-&gt;next;</span><br><span class="line"> e &#x3D; p-&gt;data;</span><br><span class="line"> p-&gt;data &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：O(1)</span><br><span class="line"></span><br><span class="line">注意：这个操作对删除最后一个结点无效！ 想要实现还得逐个便利链表找到要删除结点的前驱 时间复杂度：O(n)</span><br></pre></td></tr></table></figure><h3 id="双链表-1"><a href="#双链表-1" class="headerlink" title="双链表"></a>双链表</h3><h4 id="结构体定义-1"><a href="#结构体定义-1" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct DNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct DNode *prior,*next;</span><br><span class="line">&#125;DNode,*DLinkList; </span><br></pre></td></tr></table></figure><h4 id="带头结点-1"><a href="#带头结点-1" class="headerlink" title="带头结点"></a>带头结点</h4><h5 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool InitList(DLinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> L-&gt;prior &#x3D; NULL; &#x2F;&#x2F;头结点的prior永远指向空</span><br><span class="line"> L-&gt;next &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line"> DLinkList L;</span><br><span class="line"> InitList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判空-2"><a href="#判空-2" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(DLinkList L)&#123;</span><br><span class="line"> if(L-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="插入操作-3"><a href="#插入操作-3" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bool InsertDNode(DLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> if(p-&gt;next!&#x3D;NULL)</span><br><span class="line">    p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除操作-3"><a href="#删除操作-3" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteDNode(DLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> if(q-&gt;next!&#x3D;NULL)</span><br><span class="line">    q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="销毁链表"><a href="#销毁链表" class="headerlink" title="销毁链表"></a>销毁链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool DestoryList(DLinkList &amp;L)&#123;</span><br><span class="line"> while(L-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">    DeleteNextNode(L);</span><br><span class="line"> &#125;</span><br><span class="line"> free(L);</span><br><span class="line"> L&#x3D;NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不带头结点-1"><a href="#不带头结点-1" class="headerlink" title="不带头结点"></a>不带头结点</h4><h5 id="初始化-3"><a href="#初始化-3" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool InitDList(DLinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; NULL; </span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="判空-3"><a href="#判空-3" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(DLinkList L)&#123;</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="插入操作-4"><a href="#插入操作-4" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">bool InsertDNode(DLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;1)&#123;</span><br><span class="line">    DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;prior &#x3D; NULL;</span><br><span class="line">    s-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> if(p-&gt;next!&#x3D;NULL)</span><br><span class="line">    p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line">    p-&gt;next &#x3D; s;</span><br><span class="line">    s-&gt;prior &#x3D; p;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除操作-4"><a href="#删除操作-4" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteDNode(DLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;&#x3D;1)&#123;</span><br><span class="line">    DNode *q &#x3D; L;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    L &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> if(q-&gt;next!&#x3D;NULL)</span><br><span class="line">    q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="销毁链表-1"><a href="#销毁链表-1" class="headerlink" title="销毁链表"></a>销毁链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool DestoryList(DLinkList &amp;L)&#123;</span><br><span class="line"> while(L!&#x3D;NULL)&#123;</span><br><span class="line">    DeleteNextNode(L);</span><br><span class="line"> &#125;</span><br><span class="line"> free(L);</span><br><span class="line"> L&#x3D;NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不分类操作-1"><a href="#不分类操作-1" class="headerlink" title="不分类操作"></a>不分类操作</h4><h5 id="插入操作（后插）"><a href="#插入操作（后插）" class="headerlink" title="插入操作（后插）"></a>插入操作（后插）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool InsertNextDNode(DNode *p,DNode *s)&#123;</span><br><span class="line"></span><br><span class="line"> if(p&#x3D;&#x3D;NULL || s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> if(p-&gt;next!&#x3D;NULL)</span><br><span class="line">    p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入操作（前插）"><a href="#插入操作（前插）" class="headerlink" title="插入操作（前插）"></a>插入操作（前插）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool InsertBeforeDNode(DNode *p,DNode *s)&#123;</span><br><span class="line"></span><br><span class="line"> if(p&#x3D;&#x3D;NULL || s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;next &#x3D; p;</span><br><span class="line"> s-&gt;prior &#x3D; p-&gt;prior;</span><br><span class="line"> p-&gt;prior-&gt;next &#x3D; s;</span><br><span class="line"> p-&gt;prior &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">双链表不用像单链表的前插那样换位置了，有前驱指针就是硬气！</span><br></pre></td></tr></table></figure><h5 id="删除操作（后删）"><a href="#删除操作（后删）" class="headerlink" title="删除操作（后删）"></a>删除操作（后删）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteNextDNode(DNode *p,int &amp;e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false; </span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> if(q-&gt;next!&#x3D;NULL)</span><br><span class="line">    q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除操作（前删）"><a href="#删除操作（前删）" class="headerlink" title="删除操作（前删）"></a>删除操作（前删）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteBeforeDNode(DNode *p,int &amp;e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;prior;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> q-&gt;prior-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> p-&gt;prior &#x3D; q-&gt;prior;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双链表的遍历"><a href="#双链表的遍历" class="headerlink" title="双链表的遍历"></a>双链表的遍历</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">后向遍历</span><br><span class="line">while(p!&#x3D;NULL)&#123;</span><br><span class="line"> p &#x3D; p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">前向遍历</span><br><span class="line">while(p!&#x3D;NULL)&#123;</span><br><span class="line"> p &#x3D; p-&gt;prior;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">前向遍历（跳过头结点）</span><br><span class="line">while(p-&gt;prior!&#x3D;NULL)&#123;</span><br><span class="line"> p &#x3D; p-&gt;prior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表-1"><a href="#循环链表-1" class="headerlink" title="循环链表"></a>循环链表</h3><blockquote><p>没展示的操作就是与普通单/双链表的操作一致</p></blockquote><h4 id="结构体定义-2"><a href="#结构体定义-2" class="headerlink" title="结构体定义"></a>结构体定义</h4><h5 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct LNode *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><h5 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct DNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct DNode *prior,*next;</span><br><span class="line">&#125;DNode,*DLinkList; </span><br></pre></td></tr></table></figure><h4 id="循环单链表-1"><a href="#循环单链表-1" class="headerlink" title="循环单链表"></a>循环单链表</h4><h5 id="带头结点-2"><a href="#带头结点-2" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="初始化-4"><a href="#初始化-4" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitList(LinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line"> return false;</span><br><span class="line"> L-&gt;next &#x3D; L; &#x2F;&#x2F;头结点next指向头结点</span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判空-4"><a href="#判空-4" class="headerlink" title="判空"></a>判空</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(LinkList L)&#123;</span><br><span class="line"> if(L-&gt;next &#x3D;&#x3D; L)</span><br><span class="line"> return true;</span><br><span class="line"> else</span><br><span class="line"> return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不带头结点-2"><a href="#不带头结点-2" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="初始化-5"><a href="#初始化-5" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitList(LinkList &amp;L)&#123;</span><br><span class="line"> L&#x3D; NULL; </span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判空-5"><a href="#判空-5" class="headerlink" title="判空"></a>判空</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(LinkList L)&#123;</span><br><span class="line"> if(L &#x3D;&#x3D; NULL)</span><br><span class="line"> return true;</span><br><span class="line"> else</span><br><span class="line"> return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环双链表-1"><a href="#循环双链表-1" class="headerlink" title="循环双链表"></a>循环双链表</h4><h5 id="带头结点-3"><a href="#带头结点-3" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="初始化-6"><a href="#初始化-6" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitDLink(DLinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> L-&gt;prior &#x3D; L;</span><br><span class="line"> L-&gt;next &#x3D; L;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判空-6"><a href="#判空-6" class="headerlink" title="判空"></a>判空</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(DLinkList L)&#123;</span><br><span class="line"> if(L-&gt;next &#x3D;&#x3D; L || L-&gt;prior &#x3D;&#x3D; L)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="插入操作-5"><a href="#插入操作-5" class="headerlink" title="插入操作"></a>插入操作</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作</span><br><span class="line">bool InsertDNode(DLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="删除操作-5"><a href="#删除操作-5" class="headerlink" title="删除操作"></a>删除操作</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作</span><br><span class="line">bool DeleteDNode(DLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="不带头结点-3"><a href="#不带头结点-3" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="初始化-7"><a href="#初始化-7" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitDLink(DLinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判空-7"><a href="#判空-7" class="headerlink" title="判空"></a>判空</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(DLinkList L)&#123;</span><br><span class="line"> if(L &#x3D;&#x3D; NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="插入操作-6"><a href="#插入操作-6" class="headerlink" title="插入操作"></a>插入操作</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作</span><br><span class="line">bool InsertDNode(DLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;1)&#123;</span><br><span class="line">    DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;prior &#x3D; NULL;</span><br><span class="line">    s-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="删除操作-6"><a href="#删除操作-6" class="headerlink" title="删除操作"></a>删除操作</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作</span><br><span class="line">bool DeleteDNode(DLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;&#x3D;1)&#123;</span><br><span class="line">    DNode *q &#x3D; L;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    L &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不分类操作-2"><a href="#不分类操作-2" class="headerlink" title="不分类操作"></a>不分类操作</h5><h6 id="插入操作（后插）-1"><a href="#插入操作（后插）-1" class="headerlink" title="插入操作（后插）"></a>插入操作（后插）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作（后插）</span><br><span class="line">bool InsertNextDNode(DNode *p,DNode *s)&#123;</span><br><span class="line"></span><br><span class="line"> if(p&#x3D;&#x3D;NULL || s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="删除操作（后删）-1"><a href="#删除操作（后删）-1" class="headerlink" title="删除操作（后删）"></a>删除操作（后删）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作（后删）</span><br><span class="line">bool DeleteNextDNode(DNode *p,int &amp;e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false; </span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态链表-1"><a href="#静态链表-1" class="headerlink" title="静态链表"></a>静态链表</h3><h4 id="结构体定义-3"><a href="#结构体定义-3" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct SNode&#123;</span><br><span class="line"> ElemType data; </span><br><span class="line"> int next; &#x2F;&#x2F;下一个元素的数组下标 </span><br><span class="line">&#125;SLinkList[MAXSIZE];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void testSLinkList()&#123;</span><br><span class="line"> SLinkList s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化-8"><a href="#初始化-8" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitSLinkList(SLinkList &amp;L)&#123;</span><br><span class="line"> L[0].next &#x3D; -1; </span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)&#123;</span><br><span class="line">    L[i].next &#x3D; 0; &#x2F;&#x2F;除头结点外，其他无值结点的next游标值初始为0； </span><br><span class="line">     L[i].data &#x3D; 0; &#x2F;&#x2F;值域全部初始为0，避免脏数据 </span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="获取链表结点数"><a href="#获取链表结点数" class="headerlink" title="获取链表结点数"></a>获取链表结点数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;求链表已存结点个数</span><br><span class="line">int ListLength(SLinkList L)&#123;</span><br><span class="line"> int len,sum,end;</span><br><span class="line"> len &#x3D; 0;</span><br><span class="line"> sum &#x3D; 0;</span><br><span class="line"> end &#x3D; MAXSIZE-1; &#x2F;&#x2F;链表最底结点（非终端结点）</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];</span><br><span class="line"> while(sum!&#x3D;end)&#123;</span><br><span class="line">    if(p-&gt;next!&#x3D;-2)</span><br><span class="line">        len++;</span><br><span class="line">    p++;</span><br><span class="line">    sum++;</span><br><span class="line"> &#125;</span><br><span class="line"> return len-1; &#x2F;&#x2F;头结点不计算在内</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入操作-7"><a href="#插入操作-7" class="headerlink" title="插入操作"></a>插入操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作</span><br><span class="line">bool InsertSLinkList(SLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1 || i&gt;ListLength(L)+1)</span><br><span class="line">    return false;</span><br><span class="line"> </span><br><span class="line"> if(i&lt;&#x3D;ListLength(L))&#123;</span><br><span class="line">    int index_1 &#x3D; 0;</span><br><span class="line">    SNode *p &#x3D; &amp;L[0];&#x2F;&#x2F;找到位序为i的结点 </span><br><span class="line">    SNode *q &#x3D; &amp;L[0];</span><br><span class="line">    SNode *s &#x3D; &amp;L[0];&#x2F;&#x2F;查找第i位序的前驱结点 </span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    while(sum!&#x3D;i)&#123;</span><br><span class="line">        index_1 &#x3D; p-&gt;next;&#x2F;&#x2F;位序为i结点的下标 </span><br><span class="line">        p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">        sum++;&#x2F;&#x2F;记录第几个结点 </span><br><span class="line">    &#125;</span><br><span class="line">    while(s-&gt;next!&#x3D;index_1)&#123;</span><br><span class="line">        s++;</span><br><span class="line">    &#125; </span><br><span class="line">    int a &#x3D; 0;&#x2F;&#x2F;记录空闲结点的下标 </span><br><span class="line">    while(true)&#123;</span><br><span class="line">        if(q-&gt;next&#x3D;&#x3D;-2)&#123;</span><br><span class="line">            printf(&quot;当前下标为:%d,是否插入元素？(Yes:1&#x2F;No:0)\n&quot;,a);</span><br><span class="line">            int num;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line">            if(num)&#123;</span><br><span class="line">                q-&gt;data &#x3D; e;</span><br><span class="line">                q-&gt;next &#x3D; index_1;&#x2F;&#x2F;新节点的next指向原第i位序的结点 </span><br><span class="line">                s-&gt;next &#x3D; a;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q++;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;&#x2F;&#x2F;-----------------------------------------------</span><br><span class="line">    int index &#x3D; 0;</span><br><span class="line">    int end &#x3D; MAXSIZE-1;</span><br><span class="line">    SNode *p &#x3D; &amp;L[0];</span><br><span class="line">    SNode *q &#x3D; &amp;L[0];</span><br><span class="line">    while(q-&gt;next!&#x3D;-1)</span><br><span class="line">        q++;</span><br><span class="line">    while(index!&#x3D;end+1)&#123;</span><br><span class="line">        if(p-&gt;next&#x3D;&#x3D;-2)&#123;</span><br><span class="line">            printf(&quot;当前下标为:%d,是否插入元素？(Yes:1&#x2F;No:0)\n&quot;,index);</span><br><span class="line">            int num;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line">            if(num)&#123;</span><br><span class="line">                p-&gt;data &#x3D; e;</span><br><span class="line">                p-&gt;next &#x3D; -1;</span><br><span class="line">                q-&gt;next &#x3D; index;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p++;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历整个链表"><a href="#遍历整个链表" class="headerlink" title="遍历整个链表"></a>遍历整个链表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void GetAllSLinkList(SLinkList L)&#123;</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];</span><br><span class="line"> printf(&quot;L[0] &#x3D; 头结点 \n&quot;);</span><br><span class="line"> for(int i &#x3D; 1;i&lt;&#x3D;ListLength(L);i++)&#123;</span><br><span class="line">    p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">    printf(&quot;L[%d] &#x3D; %d \n&quot;,i,p-&gt;data);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="按位查找-3"><a href="#按位查找-3" class="headerlink" title="按位查找"></a>按位查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int GetElem(SLinkList L,int i)&#123;</span><br><span class="line"> int index &#x3D; 0;</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];</span><br><span class="line"> while(index!&#x3D;i)&#123;</span><br><span class="line">    p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">    index++;</span><br><span class="line"> &#125; </span><br><span class="line"> return p-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按值查找-3"><a href="#按值查找-3" class="headerlink" title="按值查找"></a>按值查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int LocateElem(SLinkList L,int e)&#123;</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];</span><br><span class="line"> int index &#x3D; 0;</span><br><span class="line"> while(p-&gt;data!&#x3D;e)&#123;</span><br><span class="line">    p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">    index++;</span><br><span class="line"> &#125;</span><br><span class="line"> return index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作-7"><a href="#删除操作-7" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作 </span><br><span class="line">bool DeleteSLinkList(SLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1 || i&gt;ListLength(L))</span><br><span class="line">    return false;</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];&#x2F;&#x2F;找到i位序的结点 </span><br><span class="line"> SNode *q &#x3D; &amp;L[0];&#x2F;&#x2F;找到i位序结点的前驱</span><br><span class="line"> int index &#x3D; 0;&#x2F;&#x2F;记录下标 </span><br><span class="line"> int num &#x3D; 0;&#x2F;&#x2F;记录第几个结点 </span><br><span class="line"> while(num!&#x3D;i)&#123;</span><br><span class="line">    index &#x3D; p-&gt;next;</span><br><span class="line">    p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">    num++;</span><br><span class="line"> &#125; </span><br><span class="line"> while(q-&gt;next!&#x3D;index)&#123;</span><br><span class="line">    q &#x3D; &amp;L[q-&gt;next];</span><br><span class="line"> &#125;</span><br><span class="line"> e &#x3D; p-&gt;data;</span><br><span class="line"> q-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next &#x3D; -2;</span><br><span class="line"> p-&gt;data &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章·栈和队列"><a href="#第三章·栈和队列" class="headerlink" title="第三章·栈和队列"></a>第三章·栈和队列</h1><h2 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>队列：是只允许在一端进行插入；在另一端删除的线性表</p><p>1、空队列：队列中无数据</p><p>2、队头：删除操作的那一端</p><p>3、队尾：插入操作的那一端</p><p>4、队列的特点：先进先出</p></blockquote><h4 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h4><blockquote><p>1、顺序队列与循环队列的操作相同</p></blockquote><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><blockquote><p>1、用模运算将存储空间在逻辑上变成“环状”</p><p>2、会牺牲一个存储单元（判满所需）</p><p>3、不想牺牲一个存储单元并且还想进行无歧义的判满&amp;判空，方案①：可以在结构体定义时加上一个size变量，用来你记录当前队列结点个数。<br>方案②：在结构体定义时加上一个tag变量，用来记录最近是入队还是出队的操作；入队：tag = 1；出队 tag = 0。</p><p>4、(Q.rear+MAXSIZE-Q.front)%MAXSIZE，可以得到当前队列的元素个数</p></blockquote><h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4><blockquote><p>1、链队列的带头结点判空条件可以是：Q.front==Q.rear；也可以是：Q.front-&gt;next==NULL</p><p>2、不带头结点的判空条件是：Q.front==NULL</p></blockquote><h4 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h4><blockquote><p>1、双端队列：是只允许从两端插入、两端删除的线性表</p><p>2、还存在输入受限的双端队列和输出受限的双端队列</p><p>3、输入受限的双端队列：只允许从一端插入，两端删除的线性表</p><p>4、输出受限的双端队列：只允许从一端删除，两端插入的线性表</p></blockquote><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>1、栈：是只允许在一端进行插入或删除操作的线性表</p><p>2、栈顶：指允许插入或删除操作的一端</p><p>3、空栈：无数据的栈</p><p>4、栈底：指不允许插入或删除的一端</p><p>5、栈顶元素：是新插入的元素；栈底元素：是第一个被插入的元素</p><p>6、栈的特点：后进先出</p></blockquote><h4 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h4><blockquote><p>1、与顺序表类似</p><p>2、初始化时top可为-1或0，但是操作有细微不同，不同在变动S.top</p></blockquote><h4 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h4><blockquote><p>1、两个栈共享同一片内存空间，两个栈从两边往中间增长</p><p>2、判断空栈时要注意top1和top2的指向，要同时满足top1==-1 和 top2==MAXSIZE</p></blockquote><h4 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h4><blockquote><p>1、链头进链头出，链尾进链尾出</p><p>2、链栈有判空没判满</p></blockquote><h4 id="栈的表达式求值"><a href="#栈的表达式求值" class="headerlink" title="栈的表达式求值"></a>栈的表达式求值</h4><blockquote><p>1、前缀表达式(逆波兰表达式)<br>    前缀表达式：就是运算法在两个操作数的前面<br>+ab</p><p>注意：两个操作数的前后顺序不可颠倒</p><p>2、中缀表达式<br>    中缀表达式：就是运算符在两个操作数的中间<br>a+b</p><p>3、后缀表达式(波兰表达式)<br>    后缀表达式：就是运算符在两个操作数的后面<br>ab+</p><p>注意：两个操作数的前后顺序不可颠倒</p><p>4、例子<br>    中缀表达式：a+b-c<br>后缀表达式：ab+c-<br> abc-+<br>前缀表达式：-+abc</p><p>注意：一个中缀多项式可能会转换成多种不一样的后缀表达式</p><p>5、中缀转后缀（手算）<br>    a、确定中缀表达式中各个运算符的运算顺序<br>b、选择下一个运算符，按照【做操作数 有操作数 运算符】的方式组合成一个新的操作数<br>c、如果还有运算符没被处理，就继续②</p><p>“左优先”原则：只要左边的运算符能先计算（考虑运算符的优先级），就优先计算左边的</p><p>6、中缀转后缀(机算)<br>    初始化一个栈，用于保存暂时还不能确定运算符顺序的运算符。<br>从左至右处理各个元素，直到末尾。可能遇到三种情况：<br> a、遇到操作数。直接加入后缀表达式<br>b、遇到界限符。遇到“(” 直接入栈；遇到“)” 则依次弹出栈内运算符并加入后缀表达式，直到弹出”(“ 为止。注意：“(” 不加入后缀表达式。<br>c、遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到”(“或栈空则停止。之后再把当前运算符入栈。<br>按上述方法处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式。</p><p>7、后缀表达式计算（手算）<br>    从左往右扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应运算，合体为一个操作数</p><p>注意:两个操作数的左右顺序</p><p>8、中缀表达式求值(机算)<br>    核心思想就是：中缀转后缀<br> 后缀表达式求值<br> 两个算法的结合</p><p>用栈实现中缀表达式的计算：<br>初始化两个栈，操作数栈和运算符栈。<br>若扫描到操作数，压入操作数栈。<br>若扫描到运算符或界限符，则按照“中缀转后缀”相同的逻辑压入运算符栈（期间 也会弹出运算符，每当弹出一个运算符时，就需要再弹出两个操作数栈的栈顶元素并执行相应的运算，运算结果再压回操作数栈）</p><p>9、用栈实现后缀表达式的计算<br>    a、从左往右扫描下一个元素，直到处理完所有元素<br>b、若扫描到操作数则压入栈，并回到①，否则执行③<br>c、若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①。</p><p>注意：先出栈的作为“右操作数”</p><p>10、中缀转前缀(手算)<br>    a、确定中缀表达式中各个运算符的运算顺序<br>b、选择下一个运算符，按照【运算符 左操作数 右操作数】的方式组合成一个新的操作数<br>c、如果还有运算符没被处理，就继续②</p><p>“右优先”原则：只要右边的运算符能先计算（考虑运算符的优先级），就优先计算右边的</p><p>11、前缀表达式的计算（手算）<br>    从右往左扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应运算，合体为一个操作数</p><p>注意:两个操作数的左右顺序</p><p>12、用栈实现前缀表达式的计算<br>    a、从右往左扫描下一个元素，直到处理完所有元素<br>b、若扫描到操作数则压入栈，并回到①，否则执行③<br>c、若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①。</p><p>注意：先出栈的作为“左操作数”</p></blockquote><h2 id="2、操作-1"><a href="#2、操作-1" class="headerlink" title="2、操作"></a>2、操作</h2><h3 id="顺序栈-1"><a href="#顺序栈-1" class="headerlink" title="顺序栈"></a>顺序栈</h3><h4 id="结构体定义-4"><a href="#结构体定义-4" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int top;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h4 id="初始化-9"><a href="#初始化-9" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化 </span><br><span class="line">bool InitStack(SqStack &amp;S)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    S.data[i] &#x3D; 0;</span><br><span class="line"> S.top &#x3D; -1;&#x2F;&#x2F;也可以为0，操作不一样 </span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判空-8"><a href="#判空-8" class="headerlink" title="判空"></a>判空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空 </span><br><span class="line">bool IsEmpty(SqStack S)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;-1)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入栈（插入操作）"><a href="#入栈（插入操作）" class="headerlink" title="入栈（插入操作）"></a>入栈（插入操作）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入栈（插入操作）</span><br><span class="line">bool Push(SqStack &amp;S,int e)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;MAXSIZE-1)&#x2F;&#x2F;栈满 </span><br><span class="line">    return false;</span><br><span class="line"> S.top++;</span><br><span class="line"> S.data[S.top] &#x3D; e;&#x2F;&#x2F;结合上行代码，可变：S.data[++S.top] &#x3D; e; </span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="出栈（删除操作）"><a href="#出栈（删除操作）" class="headerlink" title="出栈（删除操作）"></a>出栈（删除操作）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈（删除操作）</span><br><span class="line">bool Pop(SqStack &amp;S,int &amp;e)&#123;</span><br><span class="line"> if(S.top &#x3D;&#x3D; -1)&#x2F;&#x2F;栈空 </span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S.data[S.top];</span><br><span class="line"> S.data[S.top] &#x3D; 0;</span><br><span class="line"> S.top--;&#x2F;&#x2F;可变：e &#x3D; S.data[S.top--]; </span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="读取栈顶元素"><a href="#读取栈顶元素" class="headerlink" title="读取栈顶元素"></a>读取栈顶元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;读取栈顶元素</span><br><span class="line">bool GetTop(SqStack S,int &amp;e)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;-1)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S.data[S.top];</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="共享栈-1"><a href="#共享栈-1" class="headerlink" title="共享栈"></a>共享栈</h3><h4 id="结构体定义-5"><a href="#结构体定义-5" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int top1;</span><br><span class="line"> int top2;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h4 id="初始化-10"><a href="#初始化-10" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitStack(SqStack &amp;S)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    S.data[i] &#x3D; 0;</span><br><span class="line"> S.top1 &#x3D; MAXSIZE;</span><br><span class="line"> S.top2 &#x3D; -1;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="判满"><a href="#判满" class="headerlink" title="判满"></a>判满</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判满</span><br><span class="line">bool IsFull(SqStack S)&#123;</span><br><span class="line"> if(S.top1+1 &#x3D;&#x3D; S.top2)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="判空-9"><a href="#判空-9" class="headerlink" title="判空"></a>判空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(SqStack S)&#123;</span><br><span class="line"> if(S.top1 &#x3D;&#x3D; -1 &amp;&amp; S.top2 &#x3D;&#x3D; MAXSIZE)</span><br><span class="line">    return true</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入栈</span><br><span class="line">bool Push(SqStack &amp;S,int e)&#123;</span><br><span class="line"> if(S.top1+1 &#x3D;&#x3D; S.top2)</span><br><span class="line">    return false;</span><br><span class="line"> int num &#x3D; 0;</span><br><span class="line"> printf(&quot;你要在哪一端插入？(top1:1&#x2F;top2:0) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line"> if(num)</span><br><span class="line">    S.data[++S.top1] &#x3D; e;</span><br><span class="line"> else</span><br><span class="line">    S.data[--S.top2] &#x3D; e;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈</span><br><span class="line">bool Pop(SqStack &amp;S,int &amp;e)&#123;</span><br><span class="line"> if(S.top1 &#x3D;&#x3D; -1 &amp;&amp; S.top2 &#x3D;&#x3D; MAXSIZE)</span><br><span class="line">    return false;</span><br><span class="line"> int num &#x3D; 0;</span><br><span class="line"> printf(&quot;你要选择哪一段进行出栈？(top1:1&#x2F;top2:0) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line"> if(num)&#123;</span><br><span class="line">    e &#x3D; S.data[S.top1];</span><br><span class="line">    S.data[S.top1] &#x3D; 0;</span><br><span class="line">    S.top1--;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    e &#x3D; S.data[S.top2];</span><br><span class="line">    S.data[S.top2] &#x3D; 0;</span><br><span class="line">    S.top2++; </span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="链栈-1"><a href="#链栈-1" class="headerlink" title="链栈"></a>链栈</h3><h4 id="结构体定义-6"><a href="#结构体定义-6" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next; </span><br><span class="line">&#125;*LiStack;</span><br></pre></td></tr></table></figure><h4 id="带头结点-4"><a href="#带头结点-4" class="headerlink" title="带头结点"></a>带头结点</h4><h5 id="初始化-11"><a href="#初始化-11" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化 </span><br><span class="line">bool InitStack(LiStack &amp;S)&#123;</span><br><span class="line"> S &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(S&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> S-&gt;next &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入栈-1"><a href="#入栈-1" class="headerlink" title="入栈"></a>入栈</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入栈 </span><br><span class="line">bool Push(LiStack &amp;S,int e)&#123;</span><br><span class="line"> LinkNode *p &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> p-&gt;data &#x3D; e;</span><br><span class="line"> p-&gt;next &#x3D; S-&gt;next;</span><br><span class="line"> S-&gt;next &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出栈-1"><a href="#出栈-1" class="headerlink" title="出栈"></a>出栈</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈 </span><br><span class="line">bool Pop(LiStack &amp;S,int &amp;e)&#123;</span><br><span class="line"> if(S-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *p &#x3D; S-&gt;next;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; p-&gt;data;</span><br><span class="line"> S-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> free(p);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取栈顶元素"><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取栈顶元素</span><br><span class="line">bool GetTop(LiStack S,int &amp;e)&#123;</span><br><span class="line"> if(S-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S-&gt;next-&gt;data;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="判空-10"><a href="#判空-10" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(LiStack S)&#123;</span><br><span class="line"> if(S-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="不带头结点（推荐）"><a href="#不带头结点（推荐）" class="headerlink" title="不带头结点（推荐）"></a>不带头结点（推荐）</h4><h5 id="初始化-12"><a href="#初始化-12" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化 </span><br><span class="line">bool InitStack(LiStack &amp;S)&#123;</span><br><span class="line"> S &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入栈-2"><a href="#入栈-2" class="headerlink" title="入栈"></a>入栈</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入栈 </span><br><span class="line">bool Push(LiStack &amp;S,int e)&#123;</span><br><span class="line"> LinkNode *p &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> p-&gt;data &#x3D; e;</span><br><span class="line"> p-&gt;next &#x3D; S;</span><br><span class="line"> S &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出栈-2"><a href="#出栈-2" class="headerlink" title="出栈"></a>出栈</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈 </span><br><span class="line">bool Pop(LiStack &amp;S,int &amp;e)&#123;</span><br><span class="line"> if(S&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *p &#x3D; S;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; p-&gt;data;</span><br><span class="line"> S &#x3D; p-&gt;next;</span><br><span class="line"> free(p);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取栈顶元素-1"><a href="#获取栈顶元素-1" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取栈顶元素</span><br><span class="line">bool GetTop(LiStack S,int &amp;e)&#123;</span><br><span class="line"> if(S&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S-&gt;data;</span><br><span class="line">    return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="判空-11"><a href="#判空-11" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(LiStack S)&#123;</span><br><span class="line"> if(S&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="栈的括号匹配"><a href="#栈的括号匹配" class="headerlink" title="栈的括号匹配"></a>栈的括号匹配</h3><h4 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">bool bracketCheck(char str[],int length)&#123;</span><br><span class="line"> SqStack S;</span><br><span class="line"> InitStack(S);</span><br><span class="line"> for(int i &#x3D; 0;i&lt;length;i++)&#123;</span><br><span class="line">    if(str[i] &#x3D;&#x3D; &#39;(&#39; || str[i] &#x3D;&#x3D; &#39;[&#39; || str[i] &#x3D;&#x3D; &#39;&#123;&#39; || str[i] &#x3D;&#x3D; &#39;&lt;&#39;)&#123;</span><br><span class="line">        Push(S,str[i]); &#x2F;&#x2F;扫描到左括号，入栈 </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if(IsEmpty(S))&#x2F;&#x2F;扫描到右括号但是栈空 </span><br><span class="line">            return false;&#x2F;&#x2F;匹配失败 </span><br><span class="line">    &#125;</span><br><span class="line">    if(str[i] &#x3D;&#x3D; &#39;)&#39; || str[i] &#x3D;&#x3D; &#39;]&#39; || str[i] &#x3D;&#x3D; &#39;&#125;&#39; || str[i] &#x3D;&#x3D; &#39;&gt;&#39;)&#123;</span><br><span class="line">        char e ;</span><br><span class="line">        Pop(S,e);</span><br><span class="line">        switch(str[i])&#123;</span><br><span class="line">            case &#39;)&#39;:</span><br><span class="line">            if(e&#x3D;&#x3D;&#39;(&#39;)</span><br><span class="line">                printf(&quot;%c 与 %c 匹配成功！\n&quot;,e,str[i]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;%c 与 %c 匹配失败！\n&quot;,e,str[i]);</span><br><span class="line">            break;</span><br><span class="line">            case &#39;]&#39;:</span><br><span class="line">            if(e&#x3D;&#x3D;&#39;[&#39;)</span><br><span class="line">                printf(&quot;%c 与 %c 匹配成功！\n&quot;,e,str[i]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;%c 与 %c 匹配失败！\n&quot;,e,str[i]); </span><br><span class="line">            break;</span><br><span class="line">            case &#39;&#125;&#39;:</span><br><span class="line">            if(e&#x3D;&#x3D;&#39;&#123;&#39;)</span><br><span class="line">                printf(&quot;%c 与 %c 匹配成功！\n&quot;,e,str[i]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;%c 与 %c 匹配失败！\n&quot;,e,str[i]);</span><br><span class="line">            break;</span><br><span class="line">            case &#39;&gt;&#39;:</span><br><span class="line">            if(e&#x3D;&#x3D;&#39;&lt;&#39;)</span><br><span class="line">                printf(&quot;%c 与 %c 匹配成功！\n&quot;,e,str[i]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;%c 与 %c 匹配失败！\n&quot;,e,str[i]);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"> char str[] &#x3D; &quot;(((&#123;&#125;&lt;[])))&quot;;</span><br><span class="line"> int length &#x3D; strlen(str);</span><br><span class="line"> bracketCheck(str,length);</span><br><span class="line"> </span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的表达式求值-1"><a href="#栈的表达式求值-1" class="headerlink" title="栈的表达式求值"></a>栈的表达式求值</h3><h4 id="中缀转后缀-算法代码"><a href="#中缀转后缀-算法代码" class="headerlink" title="中缀转后缀-算法代码"></a>中缀转后缀-算法代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#define MAXSIZE 20</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> char data[MAXSIZE];</span><br><span class="line"> int top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line">bool InitStack(SqStack &amp;S)&#123;</span><br><span class="line"> S.top &#x3D; -1;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Push(SqStack &amp;S,char e)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;MAXSIZE-1)</span><br><span class="line">    return false;</span><br><span class="line"> S.data[++S.top] &#x3D; e;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Pop(SqStack &amp;S,char &amp;e)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;-1)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S.data[S.top--];</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line"> SqStack S;</span><br><span class="line"> InitStack(S);</span><br><span class="line"> char str[] &#x3D; &quot;((15&#x2F;(7-(1+1)))*3)-(2+(1+1))&quot;;</span><br><span class="line"> char e;</span><br><span class="line"> int length &#x3D; strlen(str);</span><br><span class="line"> for(int i &#x3D; 0;i&lt;length;i++)&#123;</span><br><span class="line">    if(str[i]&gt;&#x3D;&#39;A&#39; &amp;&amp; str[i]&lt;&#x3D;&#39;Z&#39; || str[i]&gt;&#x3D;&#39;a&#39; &amp;&amp; str[i]&lt;&#x3D;&#39;z&#39; || str[i]&gt;&#x3D;&#39;0&#39; &amp;&amp; str[i]&lt;&#x3D;&#39;9&#39;)&#123;&#x2F;&#x2F;操作数 </span><br><span class="line">        printf(&quot;%c&quot;,str[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> if(str[i]&#x3D;&#x3D;&#39;(&#39;)&#123;&#x2F;&#x2F;&quot;(&quot;</span><br><span class="line">    Push(S,str[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> if(str[i]&#x3D;&#x3D;&#39;)&#39;)&#123;&#x2F;&#x2F;&quot;)&quot; </span><br><span class="line">    while(S.data[S.top]!&#x3D;&#39;(&#39; )&#123;</span><br><span class="line">        Pop(S,e);</span><br><span class="line">        printf(&quot;%c&quot;,e);</span><br><span class="line">    &#125;</span><br><span class="line">    Pop(S,e);</span><br><span class="line"> &#125;</span><br><span class="line"> if(str[i]&#x3D;&#x3D;&#39;+&#39; || str[i]&#x3D;&#x3D;&#39;-&#39; || str[i]&#x3D;&#x3D;&#39;*&#39; || str[i]&#x3D;&#x3D;&#39;&#x2F;&#39;)&#123;&#x2F;&#x2F;运算符 </span><br><span class="line">    int level_1 &#x3D; 0;</span><br><span class="line">    int level_2 &#x3D; 0;</span><br><span class="line">    switch(str[i])&#123;</span><br><span class="line">        case &#39;+&#39;:</span><br><span class="line">        case &#39;-&#39;:</span><br><span class="line">            level_1 &#x3D; 1;</span><br><span class="line">        break;</span><br><span class="line">        case &#39;*&#39;:</span><br><span class="line">        case &#39;&#x2F;&#39;:</span><br><span class="line">            level_1 &#x3D; 2;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    switch(S.data[S.top])&#123;</span><br><span class="line">        case &#39;+&#39;:</span><br><span class="line">        case &#39;-&#39;:</span><br><span class="line">            level_2 &#x3D; 1;</span><br><span class="line">        break;</span><br><span class="line">        case &#39;*&#39;:</span><br><span class="line">        case &#39;&#x2F;&#39;:</span><br><span class="line">            level_2 &#x3D; 2;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    while(level_1&lt;&#x3D;level_2)&#123;</span><br><span class="line">        if(S.data[S.top]&#x3D;&#x3D;&#39;(&#39; || S.top&#x3D;&#x3D;-1)</span><br><span class="line">            break;</span><br><span class="line">        Pop(S,e);</span><br><span class="line">        printf(&quot;%c&quot;,e);</span><br><span class="line">        if(S.data[S.top]&#x3D;&#x3D;&#39;+&#39; || S.data[S.top]&#x3D;&#x3D;&#39;-&#39;)</span><br><span class="line">            level_2 &#x3D; 1;</span><br><span class="line">        if(S.data[S.top]&#x3D;&#x3D;&#39;*&#39; || S.data[S.top]&#x3D;&#x3D;&#39;&#x2F;&#39;)</span><br><span class="line">            level_1 &#x3D; 2;</span><br><span class="line">    &#125; </span><br><span class="line">    Push(S,str[i]); </span><br><span class="line">  &#125; </span><br><span class="line"> &#125;</span><br><span class="line">    while(S.top!&#x3D;-1)&#123;</span><br><span class="line">        Pop(S,e);</span><br><span class="line">        printf(&quot;%c&quot;,e);&#x2F;&#x2F;依次将在栈中剩余的运算符弹出 </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序队列-amp-循环队列"><a href="#顺序队列-amp-循环队列" class="headerlink" title="顺序队列 &amp; 循环队列"></a>顺序队列 &amp; 循环队列</h3><h4 id="结构体定义-7"><a href="#结构体定义-7" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int front,rear;&#x2F;&#x2F;队头指针和队尾指针 </span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h4 id="初始化-13"><a href="#初始化-13" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitSqQueue(SqQueue &amp;Q)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    Q.data[i] &#x3D; 0;</span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; 0;&#x2F;&#x2F;同时指向0</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="判空-12"><a href="#判空-12" class="headerlink" title="判空"></a>判空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(SqQueue Q)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判满-1"><a href="#判满-1" class="headerlink" title="判满"></a>判满</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判满</span><br><span class="line">bool IsFull(SqQueue Q)&#123;</span><br><span class="line"> if((Q.rear+1)%MAXSIZE&#x3D;&#x3D;Q.front)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入队</span><br><span class="line">bool EnQueue(SqQueue &amp;Q,int e)&#123;</span><br><span class="line"> if((Q.rear+1)%MAXSIZE&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判满 </span><br><span class="line">    return false;</span><br><span class="line"> Q.data[Q.rear] &#x3D; e;</span><br><span class="line"> Q.rear &#x3D; (Q.rear+1)%MAXSIZE;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出队</span><br><span class="line">bool DeQueue(SqQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判空</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; Q.data[Q.front];</span><br><span class="line"> Q.data[Q.front] &#x3D; 0;</span><br><span class="line"> Q.front &#x3D; (Q.front+1)%MAXSIZE;</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="获取队头元素"><a href="#获取队头元素" class="headerlink" title="获取队头元素"></a>获取队头元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取队头元素值</span><br><span class="line">bool GetHead(SqQueue Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; Q.data[Q.front];</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="队列元素个数"><a href="#队列元素个数" class="headerlink" title="队列元素个数"></a>队列元素个数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;队列元素个数</span><br><span class="line">int GetQueueNum(SqQueue Q)&#123;</span><br><span class="line"> return (Q.rear+MAXSIZE-Q.front)%MAXSIZE;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="链式队列-1"><a href="#链式队列-1" class="headerlink" title="链式队列"></a>链式队列</h3><h4 id="结构体定义-8"><a href="#结构体定义-8" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinnkNode *front,*rear; </span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h4 id="带头结点-5"><a href="#带头结点-5" class="headerlink" title="带头结点"></a>带头结点</h4><h5 id="初始化-14"><a href="#初始化-14" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> &#x2F;&#x2F;初始化时，front、rear都指向头结点 </span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> Q.front-&gt;next &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判空-13"><a href="#判空-13" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(LinkQueue Q)&#123;</span><br><span class="line"> if(Q.front-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.rear-&gt;next &#x3D; s;</span><br><span class="line"> Q.rear &#x3D; s;&#x2F;&#x2F;修改表尾指针 </span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;Q.rear)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *q &#x3D; Q.front-&gt;next;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> Q.front-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;q)&#x2F;&#x2F;最后一个结点出队 </span><br><span class="line">    Q.rear &#x3D; Q.front;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不带头结点-4"><a href="#不带头结点-4" class="headerlink" title="不带头结点"></a>不带头结点</h4><h5 id="初始化-15"><a href="#初始化-15" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判空-14"><a href="#判空-14" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(LinkQueue Q)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-2"><a href="#入队-2" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; NULL;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">    Q.front &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    Q.rear-&gt;next &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出队-2"><a href="#出队-2" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;Q.rear)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *q &#x3D; Q.front;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> Q.front &#x3D; q-&gt;next;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;q)&#x2F;&#x2F;最后一个结点出队 </span><br><span class="line">    Q.rear &#x3D; NULL;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双端队列-1"><a href="#双端队列-1" class="headerlink" title="双端队列"></a>双端队列</h3><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><h5 id="结构体定义-9"><a href="#结构体定义-9" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int front1,rear1;&#x2F;&#x2F;左端队头指针和队尾指针 </span><br><span class="line"> int front2,rear2;&#x2F;&#x2F;右端对头指针和队尾指针 </span><br><span class="line"> int EnNum,DeNum;&#x2F;&#x2F;插入、删除条件值 </span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-16"><a href="#初始化-16" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(SqQueue &amp;Q)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    Q.data[i] &#x3D; -1;</span><br><span class="line"> Q.front1 &#x3D; Q.rear1 &#x3D; 0;</span><br><span class="line"> Q.front2 &#x3D; Q.rear2 &#x3D; MAXSIZE-1;</span><br><span class="line"> Q.EnNum &#x3D; 0;&#x2F;&#x2F;0为左端，1为右端 </span><br><span class="line"> Q.DeNum &#x3D; 0;</span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-3"><a href="#入队-3" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(SqQueue &amp;Q,int e)&#123;</span><br><span class="line"> if(Q.rear1 &#x3D;&#x3D; Q.rear2)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行插入？(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum); </span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    int index &#x3D; MAXSIZE-1;</span><br><span class="line">    while(Q.data[index]!&#x3D;-1)</span><br><span class="line">        index--;</span><br><span class="line">    if(index&#x3D;&#x3D;MAXSIZE-1)</span><br><span class="line">         Q.data[Q.rear2] &#x3D; e;</span><br><span class="line">    else&#123;</span><br><span class="line">        for(int i &#x3D; index;i&lt;Q.front2;i++)&#123;</span><br><span class="line">        Q.data[i] &#x3D; Q.data[i+1];</span><br><span class="line">        Q.rear2--;</span><br><span class="line">        Q.data[Q.front2] &#x3D; e;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125; </span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    int index &#x3D; 0;</span><br><span class="line">    while(Q.data[index]!&#x3D;-1)</span><br><span class="line">        index++;</span><br><span class="line">    if(index&#x3D;&#x3D;0)</span><br><span class="line">        Q.data[Q.rear1] &#x3D; e;</span><br><span class="line">    else&#123;</span><br><span class="line">        for(int i &#x3D; index;i&gt;Q.front1;i--)&#123;</span><br><span class="line">        Q.data[i] &#x3D; Q.data[i-1];</span><br><span class="line">        Q.rear1++;</span><br><span class="line">        Q.data[Q.front1] &#x3D; e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="出队-3"><a href="#出队-3" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(SqQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.data[Q.front1]&#x3D;&#x3D;-1 &amp;&amp; Q.data[Q.front2]&#x3D;&#x3D;-1)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除？(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    if(Q.data[Q.front2]!&#x3D;-1)&#123;</span><br><span class="line">        e &#x3D; Q.data[Q.front2];</span><br><span class="line">        for(int i &#x3D; Q.front2;i&gt;Q.rear2;i--)</span><br><span class="line">            Q.data[i] &#x3D; Q.data[i-1];</span><br><span class="line">        Q.data[Q.rear2] &#x3D; -1;</span><br><span class="line">        if(Q.rear2!&#x3D;Q.front2)</span><br><span class="line">            Q.rear2++;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int index &#x3D; MAXSIZE-1;</span><br><span class="line">        while(Q.data[index]&#x3D;&#x3D;-1)</span><br><span class="line">            index--;</span><br><span class="line">        e &#x3D; Q.data[index];</span><br><span class="line">        Q.data[index] &#x3D; -1;</span><br><span class="line">        Q.rear1--;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    if(Q.data[Q.front1]!&#x3D;-1)&#123;</span><br><span class="line">    e &#x3D; Q.data[Q.front1];</span><br><span class="line">    for(int i &#x3D; 0;i&lt;Q.rear1;i++)</span><br><span class="line">        Q.data[i] &#x3D; Q.data[i+1];</span><br><span class="line">    Q.data[Q.rear1] &#x3D; -1;</span><br><span class="line">    if(Q.rear1!&#x3D;Q.front1)</span><br><span class="line">        Q.rear1--;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int index &#x3D; 0;</span><br><span class="line">        while(Q.data[index]&#x3D;&#x3D;-1)</span><br><span class="line">            index++;</span><br><span class="line">        e &#x3D; Q.data[index];</span><br><span class="line">        Q.data[index] &#x3D; -1;</span><br><span class="line">        Q.rear2++;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><h5 id="带头结点-6"><a href="#带头结点-6" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="结构体定义-10"><a href="#结构体定义-10" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum,DeNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-17"><a href="#初始化-17" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> &#x2F;&#x2F;初始化时，front、rear都指向头结点 </span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> Q.front-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.DeNum &#x3D; Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-4"><a href="#入队-4" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> printf(&quot;在哪端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    Q.rear-&gt;next &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; Q.front-&gt;next;</span><br><span class="line">    Q.front-&gt;next &#x3D; s;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-4"><a href="#出队-4" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.rear;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    while(p-&gt;next!&#x3D;q)</span><br><span class="line">        p &#x3D; p-&gt;next;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    p-&gt;next&#x3D;NULL;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.rear &#x3D; p;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    LinkNode *q &#x3D; Q.front-&gt;next;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不带头结点-5"><a href="#不带头结点-5" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="结构体定义-11"><a href="#结构体定义-11" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum,DeNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-18"><a href="#初始化-18" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> Q.DeNum &#x3D; Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-5"><a href="#入队-5" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> printf(&quot;在哪端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s; </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        Q.rear-&gt;next &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        s-&gt;next &#x3D; NULL;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        s-&gt;next &#x3D; Q.front;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-5"><a href="#出队-5" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.rear;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    if(p-&gt;next&#x3D;&#x3D;q-&gt;next)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; NULL;</span><br><span class="line">        Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        while(p-&gt;next!&#x3D;q)</span><br><span class="line">            p &#x3D; p-&gt;next;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        p-&gt;next&#x3D;NULL;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.rear &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.front;</span><br><span class="line">    LinkNode *p &#x3D; Q.front-&gt;next;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;Q.rear)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.front &#x3D; NULL;</span><br><span class="line">    Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入受限双端队列"><a href="#输入受限双端队列" class="headerlink" title="输入受限双端队列"></a>输入受限双端队列</h3><h4 id="顺序存储-1"><a href="#顺序存储-1" class="headerlink" title="顺序存储"></a>顺序存储</h4><h5 id="结构体定义-12"><a href="#结构体定义-12" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int front,rear;&#x2F;&#x2F;队头指针和队尾指针 </span><br><span class="line"> int DeNum;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-19"><a href="#初始化-19" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool InitSqQueue(SqQueue &amp;Q)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    Q.data[i] &#x3D; -1;</span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; 0;&#x2F;&#x2F;同时指向0</span><br><span class="line"> Q.DeNum &#x3D; 0;</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="入队-6"><a href="#入队-6" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入队</span><br><span class="line">bool EnQueue(SqQueue &amp;Q,int e)&#123;</span><br><span class="line"> if((Q.rear+1)%MAXSIZE&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判满 </span><br><span class="line">    return false;</span><br><span class="line"> Q.data[Q.rear] &#x3D; e;</span><br><span class="line"> Q.rear &#x3D; (Q.rear+1)%MAXSIZE;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出队-6"><a href="#出队-6" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出队</span><br><span class="line">bool DeQueue(SqQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判空</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪一端进行删除？(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    e &#x3D; Q.data[Q.rear-1];</span><br><span class="line">    Q.data[Q.rear-1] &#x3D; -1;</span><br><span class="line">    Q.rear &#x3D; (Q.rear-1)%MAXSIZE;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    e &#x3D; Q.data[Q.front];</span><br><span class="line">    Q.data[Q.front] &#x3D; -1;</span><br><span class="line">    Q.front &#x3D; (Q.front+1)%MAXSIZE;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="链式存储-1"><a href="#链式存储-1" class="headerlink" title="链式存储"></a>链式存储</h4><h5 id="带头结点-7"><a href="#带头结点-7" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="结构体定义-13"><a href="#结构体定义-13" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int DeNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列</span><br></pre></td></tr></table></figure><h6 id="初始化-20"><a href="#初始化-20" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> Q.front-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.DeNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h6 id="入队-7"><a href="#入队-7" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.rear-&gt;next &#x3D; s;</span><br><span class="line"> Q.rear &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-7"><a href="#出队-7" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.rear;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    if(p-&gt;next&#x3D;&#x3D;q-&gt;next)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; NULL;</span><br><span class="line">        Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        while(p-&gt;next!&#x3D;q)</span><br><span class="line">            p &#x3D; p-&gt;next;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        p-&gt;next&#x3D;NULL;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.rear &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line"> LinkNode *q &#x3D; Q.front;</span><br><span class="line"> LinkNode *p &#x3D; Q.front-&gt;next;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;Q.rear)&#123;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.front &#x3D; NULL;</span><br><span class="line">    Q.rear &#x3D; NULL;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.front &#x3D; p;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不带头结点-6"><a href="#不带头结点-6" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="结构体定义-14"><a href="#结构体定义-14" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum,DeNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-21"><a href="#初始化-21" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-8"><a href="#入队-8" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; NULL;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">    Q.front &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    Q.rear-&gt;next &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-8"><a href="#出队-8" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.rear;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    if(p-&gt;next&#x3D;&#x3D;q-&gt;next)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; NULL;</span><br><span class="line">        Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        while(p-&gt;next!&#x3D;q)</span><br><span class="line">            p &#x3D; p-&gt;next;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        p-&gt;next&#x3D;NULL;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.rear &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.front;</span><br><span class="line">    LinkNode *p &#x3D; Q.front-&gt;next;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;Q.rear)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; NULL;</span><br><span class="line">        Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出受限双端队列"><a href="#输出受限双端队列" class="headerlink" title="输出受限双端队列"></a>输出受限双端队列</h3><h4 id="顺序存储-2"><a href="#顺序存储-2" class="headerlink" title="顺序存储"></a>顺序存储</h4><h5 id="结构体定义-15"><a href="#结构体定义-15" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int front,rear;&#x2F;&#x2F;队头指针和队尾指针 </span><br><span class="line"> int EnNum;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-22"><a href="#初始化-22" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitSqQueue(SqQueue &amp;Q)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    Q.data[i] &#x3D; -1;</span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; 0;&#x2F;&#x2F;同时指向0</span><br><span class="line"> Q.EnNum &#x3D; 0;</span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-9"><a href="#入队-9" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入队</span><br><span class="line">bool EnQueue(SqQueue &amp;Q,int e)&#123;</span><br><span class="line"> if((Q.rear+1)%MAXSIZE&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判满 </span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪一端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    Q.data[Q.rear] &#x3D; e;</span><br><span class="line">    Q.rear &#x3D; (Q.rear+1)%MAXSIZE;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    for(int i &#x3D; Q.rear;i&gt;Q.front;i--)</span><br><span class="line">         Q.data[i] &#x3D; Q.data[i-1];</span><br><span class="line">     Q.rear &#x3D; (Q.rear+1)%MAXSIZE;</span><br><span class="line">    Q.data[Q.front] &#x3D; e;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出队-9"><a href="#出队-9" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出队</span><br><span class="line">bool DeQueue(SqQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判空</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; Q.data[Q.rear-1];</span><br><span class="line"> Q.data[Q.rear-1] &#x3D; -1;</span><br><span class="line"> Q.rear &#x3D; (Q.rear-1)%MAXSIZE;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="链式存储-2"><a href="#链式存储-2" class="headerlink" title="链式存储"></a>链式存储</h4><h5 id="带头结点-8"><a href="#带头结点-8" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="结构体定义-16"><a href="#结构体定义-16" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-23"><a href="#初始化-23" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> &#x2F;&#x2F;初始化时，front、rear都指向头结点 </span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> Q.front-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-10"><a href="#入队-10" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> printf(&quot;在哪端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    Q.rear-&gt;next &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; Q.front-&gt;next;</span><br><span class="line">    Q.front-&gt;next &#x3D; s;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-10"><a href="#出队-10" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *p &#x3D; Q.front;</span><br><span class="line"> LinkNode *q &#x3D; Q.front-&gt;next;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不带头结点-7"><a href="#不带头结点-7" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="结构体定义-17"><a href="#结构体定义-17" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-24"><a href="#初始化-24" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-11"><a href="#入队-11" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> printf(&quot;在哪端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s; </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        Q.rear-&gt;next &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        s-&gt;next &#x3D; NULL;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        s-&gt;next &#x3D; Q.front;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-11"><a href="#出队-11" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *q &#x3D; Q.front;</span><br><span class="line"> LinkNode *p &#x3D; Q.front-&gt;next;</span><br><span class="line"> if(q-&gt;next&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line"> free(q);</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.front &#x3D; p;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四章·串"><a href="#第四章·串" class="headerlink" title="第四章·串"></a>第四章·串</h1><h2 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h2><blockquote><p>串，即字符串，是由零个或多个字符组成的有限序列。一般记为：S=’a1a2a3an’(n&gt;=0)；其中S是串名，单引号（或者双引号）括起来的字符序列是串的值；ai可以是字母、数字或者其他字符；串中字符的个数n称为串的长度。n=0时的串称为空串</p></blockquote><blockquote><p>串是一种特殊的线性表，数据元素之间呈现线性关系</p></blockquote><blockquote><p>串的数据对象限定为字符集</p></blockquote><blockquote><p>串的基本操作，如增删改查(通常以子串为操作对象)</p></blockquote><blockquote><p>子串：串中任意个连续的字符组成的子序列</p></blockquote><blockquote><p>空串也是任意串的子串</p></blockquote><blockquote><p>主串：包含子串的串</p></blockquote><blockquote><p>字符在主串中的位置：字符在串中的序号（第一次出现）</p></blockquote><blockquote><p>子串在主串中的位置：子串的第一个字符在主串中的位置序号</p></blockquote><blockquote><p>空串：M=‘’；空格串：N=‘  ’</p></blockquote><h2 id="2、操作-2"><a href="#2、操作-2" class="headerlink" title="2、操作"></a>2、操作</h2><h3 id="顺序存储-3"><a href="#顺序存储-3" class="headerlink" title="顺序存储"></a>顺序存储</h3><h4 id="结构体定义-18"><a href="#结构体定义-18" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 255</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> char ch[MAXSIZE];</span><br><span class="line"> int length;</span><br><span class="line">&#125;SString;</span><br></pre></td></tr></table></figure><h4 id="初始化-25"><a href="#初始化-25" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化 </span><br><span class="line">bool InitSString(SString &amp;T)&#123;</span><br><span class="line"> T.length&#x3D;0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;赋值操作 </span><br><span class="line">bool StrAssign(SString &amp;T,char str[])&#123;</span><br><span class="line"> if(MAXSIZE-T.length&lt;strlen(str))</span><br><span class="line">    return false;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;strlen(str);i++)&#123;</span><br><span class="line">    T.ch[T.length+1] &#x3D; str[i];</span><br><span class="line">    T.length++;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="复制操作"><a href="#复制操作" class="headerlink" title="复制操作"></a>复制操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;复制操作</span><br><span class="line">bool StrCopy(SString &amp;T,SString S)&#123;</span><br><span class="line"> if(S.length&#x3D;&#x3D;0 || MAXSIZE-T.length&lt;S.length)</span><br><span class="line">    return false;</span><br><span class="line"> for(int i &#x3D; 1;i&lt;&#x3D;S.length;i++)&#123;</span><br><span class="line">    T.ch[i] &#x3D; S.ch[i];</span><br><span class="line"> &#125;</span><br><span class="line"> T.length&#x3D;S.length;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="判空-15"><a href="#判空-15" class="headerlink" title="判空"></a>判空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool StrEmpty(SString T)&#123;</span><br><span class="line"> if(T.length&#x3D;&#x3D;0)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="求串长"><a href="#求串长" class="headerlink" title="求串长"></a>求串长</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;求串长</span><br><span class="line">int StrLength(SString T)&#123;</span><br><span class="line"> return T.length;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="清空操作"><a href="#清空操作" class="headerlink" title="清空操作"></a>清空操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;串清空 </span><br><span class="line">bool ClearString(SString &amp;T)&#123;</span><br><span class="line"> T.length&#x3D;0;&#x2F;&#x2F;逻辑上清空</span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="串连接"><a href="#串连接" class="headerlink" title="串连接"></a>串连接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;串连接</span><br><span class="line">bool Concat(SString &amp;A,SString S1,SString S2)&#123;</span><br><span class="line"> if(MAXSIZE-A.length&lt;S1.length+S2.length)</span><br><span class="line">    return false;</span><br><span class="line"> for(int i &#x3D; 1;i&lt;&#x3D;S1.length;i++)</span><br><span class="line">    A.ch[++A.length] &#x3D; S1.ch[i];</span><br><span class="line"> for(int j &#x3D; 1;j&lt;&#x3D;S2.length;j++)</span><br><span class="line">    A.ch[++A.length] &#x3D; S2.ch[j];</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="求子串"><a href="#求子串" class="headerlink" title="求子串"></a>求子串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;求子串</span><br><span class="line">bool SubString(SString &amp;N,SString T,int pos,int len)&#123;&#x2F;&#x2F;注意pos+len-1 </span><br><span class="line"> if(pos&lt;1 || pos&gt;T.length || len&lt;1 || pos+len-1&gt;T.length || pos+len-1&gt;MAXSIZE-N.length)</span><br><span class="line">    return false;</span><br><span class="line"> for(int i &#x3D; pos;i&lt;pos+len;i++)</span><br><span class="line">    N.ch[++N.length] &#x3D; T.ch[i];</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="比较操作"><a href="#比较操作" class="headerlink" title="比较操作"></a>比较操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;比较操作</span><br><span class="line">&#x2F;&#x2F;若S&gt;T，则返回值&gt;0；若S&#x3D;T，则返回值&#x3D;0；若S&lt;T，则返回值为&lt;0 </span><br><span class="line">int StrCompare(SString S,SString T)&#123;</span><br><span class="line"> for(int i &#x3D; 1;i&lt;&#x3D;S.length&amp;&amp;i&lt;&#x3D;T.length;i++)&#123;</span><br><span class="line">    if(S.ch[i]!&#x3D;T.ch[i])</span><br><span class="line">        return S.ch[i]-T.ch[i];</span><br><span class="line"> &#125; </span><br><span class="line"> &#x2F;&#x2F;若扫描的所有字符都相同，则长度长的串更大 </span><br><span class="line"> return S.length-T.length;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="定位操作"><a href="#定位操作" class="headerlink" title="定位操作"></a>定位操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;定位操作</span><br><span class="line">&#x2F;&#x2F;若主串S中含有与串T值相同的子串，返回第一次出现的位置，反之返回0 </span><br><span class="line">int Index(SString S,SString T)&#123;</span><br><span class="line"> int i &#x3D; 1,n &#x3D; StrLength(S),m &#x3D; StrLength(T);</span><br><span class="line"> SString sub;&#x2F;&#x2F;用于暂存子串</span><br><span class="line"> while(i&lt;&#x3D;n-m+1)&#123;</span><br><span class="line">    SubString(sub,S,i,m);</span><br><span class="line">    if(StrCompare(sub,T)!&#x3D;0)</span><br><span class="line">        ++i;</span><br><span class="line">    else</span><br><span class="line">        return i;&#x2F;&#x2F;返回子串在主串中的位置 </span><br><span class="line"> &#125; </span><br><span class="line"> return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="链式存储-3"><a href="#链式存储-3" class="headerlink" title="链式存储"></a>链式存储</h3><h4 id="结构体定义-19"><a href="#结构体定义-19" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">typedef struct StringNode&#123;</span><br><span class="line"> char ch;</span><br><span class="line"> struct StringNode *next;</span><br><span class="line">&#125;StringNode,*String;</span><br><span class="line"></span><br><span class="line">但是上面的这种存储密度低，每个字符1 B，每个指针4B。</span><br><span class="line"></span><br><span class="line">typedef struct StringNode&#123;</span><br><span class="line"> char ch[4];&#x2F;&#x2F;每个结点存多个字符，没有字符的位置用‘‘#’或‘\0’补足’</span><br><span class="line"> struct StringNode *next;</span><br><span class="line">&#125;StringNode,*String;</span><br><span class="line"></span><br><span class="line">这样存储密度就高了</span><br></pre></td></tr></table></figure><h2 id="串的模式匹配算法"><a href="#串的模式匹配算法" class="headerlink" title="串的模式匹配算法"></a>串的模式匹配算法</h2><h3 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h3><h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><blockquote><p>若模式串长度为m，主串长度为n，则：<br>匹配成功，最好时间复杂度为：O(m)<br>匹配失败，最好时间复杂度为：O(n-m+1)=O(n-m)约等于O(n)</p><p>匹配成功/匹配失败的最坏时间复杂度为：O(nm)</p></blockquote><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><blockquote><p>当某些子串与模式串能部分匹配时，主串的扫描指针i经常回溯，导致时间开销增加。最坏的时间复杂度为：O(nm)</p></blockquote><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><h4 id="求next数组（手算）"><a href="#求next数组（手算）" class="headerlink" title="求next数组（手算）"></a>求next数组（手算）</h4><blockquote><p>当模式串的第j个字符匹配失败时，令模式串跳到next[j]再继续匹配</p><p>串的前缀：包含第一个字符，且不包含最后一个字符的子串<br>串的后缀：包含最后一个字符，且不包含第一个字符的子串</p><p>当第j个字符匹配失败，由前1~j-1个字符组成的串记为S，则：<br>       next[j] = S的最长相等前后缀长度+1<br>       特别的，所有的模式串next[1] = 0   next[2] = 1</p></blockquote><h4 id="求next数组（机算）"><a href="#求next数组（机算）" class="headerlink" title="求next数组（机算）"></a>求next数组（机算）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;求模式串T的next数组</span><br><span class="line">void get_next(SString T,int next[])&#123;</span><br><span class="line"> int i &#x3D; 1,j &#x3D; 0;</span><br><span class="line"> next[1] &#x3D; 0;</span><br><span class="line"> while(i&lt;T.length)&#123;</span><br><span class="line">    if(j&#x3D;&#x3D;0||T.ch[i]&#x3D;&#x3D;T.ch[j])&#123;</span><br><span class="line">        ++i;</span><br><span class="line">        ++j;</span><br><span class="line">        &#x2F;&#x2F;若pi &#x3D; pj，则next[j+1] &#x3D; next[j]+1</span><br><span class="line">        next[i] &#x3D; j;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;否则令j &#x3D; next[j]，循环继续</span><br><span class="line">        j &#x3D; next[j];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="KMP性能分析"><a href="#KMP性能分析" class="headerlink" title="KMP性能分析"></a>KMP性能分析</h4><blockquote><p>KMP平均时间复杂度为：O(n+m)</p></blockquote><h3 id="KMP算法优化——nextval数组"><a href="#KMP算法优化——nextval数组" class="headerlink" title="KMP算法优化——nextval数组"></a>KMP算法优化——nextval数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">nextval数组的求法：</span><br><span class="line">先算出next数组</span><br><span class="line">先令nextval[i] &#x3D; 0;</span><br><span class="line">for(int j &#x3D; 2;j&lt;&#x3D;T.length;j++)&#123;</span><br><span class="line"> if(T.ch[next[j]]&#x3D;&#x3D;T.ch[j])</span><br><span class="line"> nextval[j] &#x3D; nextval[next[j]];</span><br><span class="line"> else</span><br><span class="line"> nextval[j] &#x3D; next[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">KMP算法优化：当子串和模式串不匹配时j &#x3D; nextval[j];</span><br></pre></td></tr></table></figure><h1 id="第五章·数组、矩阵和广义表"><a href="#第五章·数组、矩阵和广义表" class="headerlink" title="第五章·数组、矩阵和广义表"></a>第五章·数组、矩阵和广义表</h1><h2 id="1、定义-3"><a href="#1、定义-3" class="headerlink" title="1、定义"></a>1、定义</h2><h3 id="二维数组（行和列）"><a href="#二维数组（行和列）" class="headerlink" title="二维数组（行和列）"></a>二维数组（行和列）</h3><h4 id="1、行优先存储"><a href="#1、行优先存储" class="headerlink" title="1、行优先存储"></a>1、行优先存储</h4><blockquote><p> 假设二维数组为 m 行 n 列，起始地址为 s，每个元素占k 个字节，第一个元素下标从 0 开始， 则有：<br>aij 的地址=s+(前面元素个数)<em>k<br>=s+(i</em>n+j)*k<br>若第一个元素下标从 1 开始，则有：<br>aij 的地址=s+(前面元素个数)*k<br> =s+((i-1)*n+(j-1)) *k</p></blockquote><h4 id="2、列优先存储"><a href="#2、列优先存储" class="headerlink" title="2、列优先存储"></a>2、列优先存储</h4><blockquote><p>假设二维数组为 m 行 n 列，起始地址为 s，每个元素占k 个字节，第一个元素下标从 0 开始， 则有：<br>aij 的地址=s+(前面元素个数)<em>k<br> =s+(j</em>m+i)*k<br>若第一个元素下标从 1 开始，则有：<br>aij 的地址=s+(前面元素个数)*k<br> =s+((j-1)*m+(i-1) ) *k</p><p>int a[m][n]; 行标从 0<del>m-1 列标从 0</del>n-1</p><p>m 行n 列：行标从 0<del>m-1 列标从 0</del>n-1</p><p>行标从 1<del>m 列标从 1</del>n</p></blockquote><h4 id="3、练习"><a href="#3、练习" class="headerlink" title="3、练习"></a>3、练习</h4><blockquote><p>若有数组 a[8][6]，下标从 0 开始，始起地址为 1000，每个元素占 3 个字节，求 a[3][4] 按行优先和列优先存储的地址。</p><p>行优先存储：<br>1000+(3<em>6+4)<em>3=1000+22</em>3=1066<br>列优先存储：<br>1000+(4</em>8+3)<em>3=1000+35</em>3=1105</p></blockquote><h3 id="对称矩阵"><a href="#对称矩阵" class="headerlink" title="对称矩阵"></a>对称矩阵</h3><h4 id="1、对称矩阵的特点"><a href="#1、对称矩阵的特点" class="headerlink" title="1、对称矩阵的特点"></a>1、对称矩阵的特点</h4><blockquote><p>（1） 方阵：行数和列数相等<br>（2） 满足aij==aji<br>（3） 相对于主对角线对称</p></blockquote><h4 id="2、对称矩阵的压缩存储"><a href="#2、对称矩阵的压缩存储" class="headerlink" title="2、对称矩阵的压缩存储"></a>2、对称矩阵的压缩存储</h4><blockquote><p>（1） 只存储上三角矩阵<br>（2） 只存储下三角矩阵</p></blockquote><h4 id="3、上三角矩阵的存储（n行n列，下标从0开始）"><a href="#3、上三角矩阵的存储（n行n列，下标从0开始）" class="headerlink" title="3、上三角矩阵的存储（n行n列，下标从0开始）"></a>3、上三角矩阵的存储（n行n列，下标从0开始）</h4><blockquote><p>行优先：aij 地址=s+(i<em>n-i</em>(i-1)/2+(j-i))*k<br>列优先：aij 地址=s+( (1+j)*j/2+i )*k</p></blockquote><h4 id="4、下三角矩阵的存储（n行n列，下标从0开始）"><a href="#4、下三角矩阵的存储（n行n列，下标从0开始）" class="headerlink" title="4、下三角矩阵的存储（n行n列，下标从0开始）"></a>4、下三角矩阵的存储（n行n列，下标从0开始）</h4><blockquote><p>行优先：aij 地址=s+((1+i)<em>i/2+j)<em>k<br>列优先：aij 地址=s+(j</em>n-j</em>(j-1)/2+(i-j))*k</p><p>注意：<br> i==j，aij 在对角线上<br> i&gt;j， aij 在下三角矩阵<br> i&lt;j， aij 在上三角矩阵</p></blockquote><h3 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h3><blockquote><p>1、三角矩阵是一个方阵</p><p>2、上三角或下三角元素全为0，对应另一侧非0</p><p>3、求解方法参照对称矩阵中的三角阵</p></blockquote><h3 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h3><blockquote><p>1、定义：m 行 n 列的矩阵中，非零元素的个数远远小于m*n（总元素个数）。</p><p>2、稀疏矩阵的压缩存储：只存非零元素</p><p>3、顺序存储（行，列，值）</p></blockquote><h1 id="第六章·树和二叉树"><a href="#第六章·树和二叉树" class="headerlink" title="第六章·树和二叉树"></a>第六章·树和二叉树</h1><h2 id="1、定义-4"><a href="#1、定义-4" class="headerlink" title="1、定义"></a>1、定义</h2><h3 id="树"><a href="#树" class="headerlink" title="树"></a>树</h3><blockquote><p>1、树是n(n&gt;=0)个结点的有限集合，n = 0<br>时,称为空树；在任意一颗非空树中应满足：1）、有且仅有一个特定的称为根的结点       2）、当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集合T1，T2，T3…Tm，其中每个集合本身又是一颗树，并且称为子树</p><p>2、非空树的特性<br>    有且仅有一个根结点<br>    没有后继的结点成为“叶子结点”（终端结点）<br>    有后继的结点称为：“分支结点”（非终端结点）<br>    了根结点之外，任何一个结点都有且只有一个前驱<br>    每个结点可以有0个或多个后继</p><p>3、结点之间的关系<br>    祖先结点<br>    子孙结点<br>    双亲结点（父结点）<br>    孩子结点<br>    兄弟结点<br>    堂兄弟结点<br>    两个结点之间的路径是从上往下的<br>    路径的长度是经过几条边</p><p>4、结点、树的属性<br>    结点的层数（深度）（默认从1开始）：从上往下数<br>    结点的高度：从下往上数<br>    树的高度（深度）：总共有多少层<br>    树的度：各结点的度的最大值<br>    结点的度：有几个孩子（分支）</p><p>5、有序数VS.无序树<br>     有序树：逻辑上看，树中结点的各子树从左至右是有次序的，不能互换<br>    无序树：逻辑上看，树中结点的各子树从左至右是无次序的，可以互换</p><p>6、树VS.森林<br>     森林：是m(m&gt;=0)课互不相交的树的集合，m=0时为空森林。</p></blockquote><h3 id="树的常考性质"><a href="#树的常考性质" class="headerlink" title="树的常考性质"></a>树的常考性质</h3><blockquote><p>1、结点数 = 总度数+1</p><p>2、度为m的树、m叉树的区别<br>    树的度——各结点的度的最大值<br>        度为m的树<br>    任意结点的度都&lt;=m(最多m个孩子)<br>    至少有一个结点的度为=m（有m个孩子）<br>    一定是非空数，至少有m+1个结点<br>    m叉树——每个结点最多只能有m个孩子的树<br>        m叉树<br>    任意结点的度都&lt;=m(最多m个孩子)<br>    允许所有结点的度都&lt;m<br>    可以是空树（m叉空树）</p><p>3、度为m的树第i层至多有m的i-1次方个结点(i&gt;=1);   </p><p>4、m叉树的第i层至多有m的i-1次方个结点(i&gt;=1)</p><p>5、高度为h的m叉树至多有m-1分之m的h次方-1个结点</p><p>6、高度为h的m叉树至少有h个结点</p><p>7、高度为h、度为m的树，至少有h+m-1个结点</p><p>8、具有n个结点的m叉树最小的高度为：log以m为底(n(m-1)+1)  向上取整</p></blockquote><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><blockquote><p>1、二叉树是n(n&gt;=0)个结点的有限集合：<br>    1）、或者为空二叉树，即n = 0<br>    2）、或者由一个根结点和两个互不相交被称为根的左子树和右子树组成。左子树和右子树有分别是一颗二叉树<br>    特点：①每个结点至多只有两颗子树<br>         ②左右子树不能颠倒（二叉树是有序树）</p><p>2、二叉树的五种状态<br>    空二叉树<br>    只有根结点<br>    只有左子树<br>    只有右子树<br>    左右子树都有</p><p>3、特殊二叉树<br><strong>满二叉树：</strong><br>一颗高度为h，且含有2的h次方-1个结点的二叉树</p><p>特点：<br>只有最后一层有叶子结点<br>不存在度为1的结点（要么为2或0）<br>按层序从1开始编号，结点i的左孩子为2i，右孩子为2i+1，结点i的父结点为i/2向下取整（如果有的话）<br><strong>完全二叉树：</strong><br>当且仅当其每个结点都与高度h的满二叉树中编号为1~ n的结点一一对应时，称为完全二叉树<br>特点：<br>只有最后两层可能有叶子结点<br>最多只有一个度为1的结点<br>按层序从1开始编号，结点i的左孩子为2i，右孩子为2i+1，结点i的父结点为i/2向下取整（如果有的话）<br>i&lt;=n/2向下取整 为分支结点；i&gt; n/2向下取整 为叶子结点<br>注意： 如果在完全二叉树中某结点只有一个孩子的话，那么一定是左孩子</p><p><strong>二叉排序树：（可用于元素的排序、搜索）</strong><br>一颗二叉树或者是空二叉树，或者是具有如下性质的二叉树：<br>左子树上所有结点的关键字均小于根结点的关键字<br>右子树上所有结点的关键字均大于根结点的关键字<br>左子树和右子树又各是一颗二叉排序树</p><p><strong>平衡二叉树：(具有更高的搜索效率)</strong><br>树上任一结点的左子树和右子树的深度（高度）之差不超过1</p></blockquote><h3 id="二叉树的常考性质"><a href="#二叉树的常考性质" class="headerlink" title="二叉树的常考性质"></a>二叉树的常考性质</h3><blockquote><p>1、设非空二叉树中度为0、1、2的结点个数分别为n0,n1和n2，则n0 = n2+1（叶子结点比分支结点多一个）<br>      设树中结点的总个数为n，则：<br>        ①n = n0+n1+n2<br>        ②n = n1+2n2+1</p><p>2、二叉树的第i层至多有2的i-1次方个结点(i&gt;=1)          m叉树的第i层至多有m的i-1次方个结点（i&gt;=1） </p><p>3、高度为h的二叉树至多有2的h次方-1个结点（满二叉树）          高度为h的m叉树至多有m-1分之m的h次方-1个结点</p></blockquote><h3 id="完全二叉树的常考性质"><a href="#完全二叉树的常考性质" class="headerlink" title="完全二叉树的常考性质"></a>完全二叉树的常考性质</h3><blockquote><p>1、具有n个(n&gt;0)结点的完全二叉树的高度h为log以2为底(n+1)向上取整 或 log以2为底n向下取整+1</p><p>2、对于完全二叉树，可以由结点数n推出度为0、1、2的结点个数为n0，n1，n2<br>   完全二叉树最多只有一个度为1的结点，即：<br>      n1 = 0或1            n0 = n2+1 -&gt; n0+n2一定是奇数</p></blockquote><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><blockquote><p><strong>什么是遍历</strong><br>遍历：按照某种次序把所有结点都访问一遍</p><p>层次遍历：基于树的层次特性确定的次序规则</p><p>先/中/后序遍历：基于树的递归特性确定的次序规则</p><p><strong>先序遍历</strong><br>根  左  右</p><p><strong>中序遍历</strong><br>左  根  右</p><p><strong>后序遍历</strong><br>左  右  根</p><p><strong>层序遍历</strong><br>算法思想：<br>①初始化一个辅助队列<br>②根结点入队<br>③若队列为空，则对头结点出队，访问该结点，并将其左、右孩子插入队尾（如果有的话）<br>④重复3直至队列为空</p></blockquote><h3 id="由遍历序列构造二叉树"><a href="#由遍历序列构造二叉树" class="headerlink" title="由遍历序列构造二叉树"></a>由遍历序列构造二叉树</h3><blockquote><p>前序+中序遍历序列</p><p>后序+中序遍历序列</p><p>层序+中序遍历序列</p></blockquote><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><blockquote><p>又称二叉查找树</p><p>一颗二叉树或者空二叉树，或者是具有如下性质的二叉树：<br>    左子树上所有结点的关键字都小于根节点的关键字<br>    右子树上所有结点的关键字都大于根节点的关键字<br>    左子树和右子树又各是一颗二叉排序树</p><p>进行中序遍历，可以得到一个递增的有序序列</p></blockquote><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><blockquote><p>平衡二叉树，简称平衡树（AVL树）——树上任意结点的左子树和右子树的高度之差不超过1</p><p>结点的平衡因子=左子树高-右子树高</p></blockquote><h2 id="2、操作-3"><a href="#2、操作-3" class="headerlink" title="2、操作"></a>2、操作</h2><h3 id="二叉树-1"><a href="#二叉树-1" class="headerlink" title="二叉树"></a>二叉树</h3><h4 id="顺序存储-4"><a href="#顺序存储-4" class="headerlink" title="顺序存储"></a>顺序存储</h4><h5 id="结构体定义-20"><a href="#结构体定义-20" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#definr MAXSIZE 10</span><br><span class="line">struct TreeNode&#123;</span><br><span class="line"> int value;</span><br><span class="line"> bool isEmpty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TreeNode t[MAXSIZE];</span><br></pre></td></tr></table></figure><h4 id="链式存储-4"><a href="#链式存储-4" class="headerlink" title="链式存储"></a>链式存储</h4><h5 id="结构体定义-21"><a href="#结构体定义-21" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct BiTNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct BiTNode *lchild,*rchild;&#x2F;&#x2F;左右孩子指针 </span><br><span class="line">&#125;BiTNode,*BiTree; </span><br><span class="line"></span><br><span class="line">如果想要逆向找到某个结点的父结点，可以新增一个指针（父指针）</span><br><span class="line"> struct BiTNode *parent;（这样就叫做三叉链表）</span><br></pre></td></tr></table></figure><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><h4 id="顺序存储-5"><a href="#顺序存储-5" class="headerlink" title="顺序存储"></a>顺序存储</h4><h5 id="结构体定义-22"><a href="#结构体定义-22" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#definr MAXSIZE 10</span><br><span class="line">struct TreeNode&#123;</span><br><span class="line"> int value;</span><br><span class="line"> bool isEmpty;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">TreeNode t[MAXSIZE];</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="初始化-26"><a href="#初始化-26" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitTree(TreeNode T[])&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)&#123;</span><br><span class="line">    T[i].isEmpty &#x3D; true;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="链式存储-5"><a href="#链式存储-5" class="headerlink" title="链式存储"></a>链式存储</h4><h5 id="结构体定义-23"><a href="#结构体定义-23" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct BiTNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct BiTNode *lchild,*rchild;&#x2F;&#x2F;左右孩子指针 </span><br><span class="line">&#125;BiTNode,*BiTree; </span><br><span class="line"></span><br><span class="line">如果想要逆向找到某个结点的父结点，可以新增一个指针（父指针）</span><br><span class="line"> struct BiTNode *parent;（这样就叫做三叉链表）</span><br></pre></td></tr></table></figure><h3 id="二叉树的遍历-1"><a href="#二叉树的遍历-1" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;先序遍历</span><br><span class="line">void PreOrder(BiTree T)&#123;</span><br><span class="line">    if(T!&#x3D;NULL)&#123;</span><br><span class="line">        visit(T);&#x2F;&#x2F;访问根结点</span><br><span class="line">        PreOrder(T-&gt;lchild);&#x2F;&#x2F;递归遍历左子树</span><br><span class="line">        PreOrder(T-&gt;rchild);&#x2F;&#x2F;递归遍历右子树</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;中序遍历</span><br><span class="line">void InOrder(BiTree T)&#123;</span><br><span class="line">    if(T!&#x3D;NULL)&#123;</span><br><span class="line">        InOrder(T-&gt;lchild);</span><br><span class="line">        visit(T);</span><br><span class="line">        InOrder)(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;后序遍历</span><br><span class="line">void PostOrder(BiTree T)&#123;</span><br><span class="line">    if(T!&#x3D;NULL)&#123;</span><br><span class="line">        PostOrder(T-&gt;lchild);</span><br><span class="line">        PostOrder)(T-&gt;rchild);</span><br><span class="line">        visit(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;层序遍历</span><br><span class="line">void LevelOrder(BiTree T)&#123;</span><br><span class="line">    LinkQueue Q;</span><br><span class="line">    InitQueue(Q);&#x2F;&#x2F;初始化辅助队列</span><br><span class="line">    BiTree p;</span><br><span class="line">    EnQueue(Q,T);&#x2F;&#x2F;将根结点入队</span><br><span class="line">    while(!IsEmpty(Q))&#123;</span><br><span class="line">          DeQueue(Q,p);</span><br><span class="line">          visit(p);</span><br><span class="line">          if(p-&gt;lchild!&#x3D;NULL)</span><br><span class="line">                EnQueue(Q,p-&gt;lchild);&#x2F;&#x2F;左孩子入队</span><br><span class="line">          if(p-&gt;rchild!&#x3D;NULL)</span><br><span class="line">                EnQueue(Q,p-&gt;rchild);&#x2F;&#x2F;右孩子入队</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><h4 id="结构体定义-24"><a href="#结构体定义-24" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct ThreadNode&#123;</span><br><span class="line">     int data;</span><br><span class="line">     struct ThreadNode *lchild,*rchild;</span><br><span class="line">     int ltag,rtag;&#x2F;&#x2F;左、右线索标志</span><br><span class="line">&#125;THreadNode,*ThreadTree;</span><br><span class="line"></span><br><span class="line">tag&#x3D;&#x3D;0，表示指针指向的是孩子</span><br><span class="line">tag&#x3D;&#x3D;1，表示指针指向的是线索</span><br></pre></td></tr></table></figure><h3 id="二叉树的线索化"><a href="#二叉树的线索化" class="headerlink" title="二叉树的线索化"></a>二叉树的线索化</h3><h4 id="普通方法找中序前驱"><a href="#普通方法找中序前驱" class="headerlink" title="普通方法找中序前驱"></a>普通方法找中序前驱</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;中序遍历</span><br><span class="line">void InOrder(BiTree T)&#123;</span><br><span class="line">    if(T!&#x3D;NULL)&#123;</span><br><span class="line">        InOrder(T-&gt;lchild);</span><br><span class="line">        visit(T);</span><br><span class="line">        InOrder(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;访问结点q</span><br><span class="line">void visit(BiTNode *q)&#123;</span><br><span class="line">     if(q&#x3D;&#x3D;p)&#x2F;&#x2F;当前访问结点恰好是结点p</span><br><span class="line">         final &#x3D; pre;&#x2F;&#x2F;找到p的前驱</span><br><span class="line">     else </span><br><span class="line">          pre &#x3D; q;&#x2F;&#x2F;pre指向当前访问的结点</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;辅助全局变量，用于查钊结点p的前驱</span><br><span class="line">BiTNode *p;&#x2F;&#x2F;p指向目标结点</span><br><span class="line">BiTNode *pre &#x3D; NULL;&#x2F;&#x2F;指向当前结点的前驱结点</span><br><span class="line">BiTNode *final &#x3D; NULL;&#x2F;&#x2F;用于记录最终结果</span><br></pre></td></tr></table></figure><h4 id="中序线索二叉树"><a href="#中序线索二叉树" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;全局变量 pre，指向当前访问结点的前驱</span><br><span class="line">ThreadNode *pre &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;中序遍历，一遍遍历一遍线索化</span><br><span class="line">void InThread(ThreadTree T)&#123;</span><br><span class="line">    if(T!&#x3D;NULL)&#123;</span><br><span class="line">        InThread(T-&gt;lchild);</span><br><span class="line">        visit(T);</span><br><span class="line">        InThread(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void visit(ThreadNode *q)&#123;</span><br><span class="line">     if(q-&gt;lchild&#x3D;&#x3D;NULL)&#123;&#x2F;&#x2F;左子树为空，建立线索化</span><br><span class="line">           q-&gt;lchild &#x3D; pre;</span><br><span class="line">           q-&gt;ltag &#x3D; 1;</span><br><span class="line">     &#125;</span><br><span class="line">     if(pre!&#x3D;NULL &amp;&amp; pre-&gt;rchild&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">            pre-&gt;rchild &#x3D; q;&#x2F;&#x2F;建立前驱结点的后继线索化</span><br><span class="line">            pre-&gt;rtag &#x3D; 1;</span><br><span class="line">     &#125;</span><br><span class="line">     pre &#x3D; q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;中序线索化二叉树T</span><br><span class="line">void   CreateInThread(ThreadTree T)&#123;</span><br><span class="line">       pre&#x3D;NULL;&#x2F;&#x2F;pre初始化为NULL</span><br><span class="line">       if(T!&#x3D;NULL)&#123;&#x2F;&#x2F;非空二叉树才可以线索化</span><br><span class="line">             InThread(T);&#x2F;&#x2F;中序线索化二叉树</span><br><span class="line">             if(pre-&gt;rchild&#x3D;&#x3D;NULL)</span><br><span class="line">                     pre-&gt;rtag&#x3D;1;&#x2F;&#x2F;处理遍历的最后一个结点</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="先序线索二叉树"><a href="#先序线索二叉树" class="headerlink" title="先序线索二叉树"></a>先序线索二叉树</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;全局变量 pre，指向当前访问结点的前驱</span><br><span class="line">ThreadNode *pre &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;先序遍历，一遍遍历一遍线索化</span><br><span class="line">void PreThread(ThreadTree T)&#123;</span><br><span class="line">    if(T!&#x3D;NULL)&#123;</span><br><span class="line">        visit(T);</span><br><span class="line">       if(T-&gt;ltag&#x3D;&#x3D;0)&#x2F;&#x2F;lchild不是前驱线索</span><br><span class="line">                PreThread(T-&gt;lchild);</span><br><span class="line">        PreThread(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void visit(ThreadNode *q)&#123;</span><br><span class="line">     if(q-&gt;lchild&#x3D;&#x3D;NULL)&#123;&#x2F;&#x2F;左子树为空，建立线索化</span><br><span class="line">           q-&gt;lchild &#x3D; pre;</span><br><span class="line">           q-&gt;ltag &#x3D; 1;</span><br><span class="line">     &#125;</span><br><span class="line">     if(pre!&#x3D;NULL &amp;&amp; pre-&gt;rchild&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">            pre-&gt;rchild &#x3D; q;&#x2F;&#x2F;建立前驱结点的后继线索化</span><br><span class="line">            pre-&gt;rtag &#x3D; 1;</span><br><span class="line">     &#125;</span><br><span class="line">     pre &#x3D; q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;先序线索化二叉树T</span><br><span class="line">void   CreatePreThread(ThreadTree T)&#123;</span><br><span class="line">       pre&#x3D;NULL;&#x2F;&#x2F;pre初始化为NULL</span><br><span class="line">       if(T!&#x3D;NULL)&#123;&#x2F;&#x2F;非空二叉树才可以线索化</span><br><span class="line">             PreThread(T);&#x2F;&#x2F;先序线索化二叉树</span><br><span class="line">             if(pre-&gt;rchild&#x3D;&#x3D;NULL)</span><br><span class="line">                     pre-&gt;rtag&#x3D;1;&#x2F;&#x2F;处理遍历的最后一个结点</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序线索二叉树"><a href="#后序线索二叉树" class="headerlink" title="后序线索二叉树"></a>后序线索二叉树</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;全局变量 pre，指向当前访问结点的前驱</span><br><span class="line">ThreadNode *pre &#x3D; NULL;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;后序遍历，一遍遍历一遍线索化</span><br><span class="line">void PostThread(ThreadTree T)&#123;</span><br><span class="line">    if(T!&#x3D;NULL)&#123;</span><br><span class="line">        PostThread(T-&gt;lchild);</span><br><span class="line">        PostThread(T-&gt;rchild);</span><br><span class="line">        visit(T);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void visit(ThreadNode *q)&#123;</span><br><span class="line">     if(q-&gt;lchild&#x3D;&#x3D;NULL)&#123;&#x2F;&#x2F;左子树为空，建立线索化</span><br><span class="line">           q-&gt;lchild &#x3D; pre;</span><br><span class="line">           q-&gt;ltag &#x3D; 1;</span><br><span class="line">     &#125;</span><br><span class="line">     if(pre!&#x3D;NULL &amp;&amp; pre-&gt;rchild&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">            pre-&gt;rchild &#x3D; q;&#x2F;&#x2F;建立前驱结点的后继线索化</span><br><span class="line">            pre-&gt;rtag &#x3D; 1;</span><br><span class="line">     &#125;</span><br><span class="line">     pre &#x3D; q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;后序线索化二叉树T</span><br><span class="line">void   CreatePostThread(ThreadTree T)&#123;</span><br><span class="line">       pre&#x3D;NULL;&#x2F;&#x2F;pre初始化为NULL</span><br><span class="line">       if(T!&#x3D;NULL)&#123;&#x2F;&#x2F;非空二叉树才可以线索化</span><br><span class="line">             PostThread(T);&#x2F;&#x2F;后序线索化二叉树</span><br><span class="line">             if(pre-&gt;rchild&#x3D;&#x3D;NULL)</span><br><span class="line">                     pre-&gt;rtag&#x3D;1;&#x2F;&#x2F;处理遍历的最后一个结点</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找前驱"><a href="#找前驱" class="headerlink" title="找前驱"></a>找前驱</h4><h5 id="中序线索二叉树-1"><a href="#中序线索二叉树-1" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">在中序线索二叉树中找到指定结点*p的前驱结点pre</span><br><span class="line">若p-&gt;ltag&#x3D;1，则pre&#x3D;p-&gt;lchild</span><br><span class="line">若p-&gt;ltag&#x3D;0，则指定的结点肯定有左孩子，需要遍历左子树（左，根，右），则pre&#x3D;p的左子树最右下结点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;找到以p为根的子树中，最后一个被中序遍历的结点</span><br><span class="line">ThreadNode *LastNode(ThreadNode *p)&#123;</span><br><span class="line">     &#x2F;&#x2F;循环找到最右下角的结点（不一定是叶子结点）</span><br><span class="line">     while(p-&gt;rtag&#x3D;&#x3D;0)</span><br><span class="line">           p&#x3D;p-&gt;rchild;</span><br><span class="line">     return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在中序线索二叉树中找到指定结点p的前驱结点</span><br><span class="line">ThreadNOde *PreNode(ThreadNode *p)&#123;</span><br><span class="line">          &#x2F;&#x2F;右子树中最左下结点</span><br><span class="line">         if(p-&gt;ltag&#x3D;&#x3D;0)</span><br><span class="line">              return LastNode(p-&gt;lchild);</span><br><span class="line">         else</span><br><span class="line">               return p-&gt;lchild;&#x2F;&#x2F;ltag&#x3D;&#x3D;1，直接返回前驱线索</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;对中序线索二叉树进行逆向中序遍历</span><br><span class="line">void RevInOrder(ThreadNode *T)&#123;</span><br><span class="line">       for(ThreadNode *p&#x3D;LastNode(T);p!&#x3D;NULL;p&#x3D;PreNode(p))</span><br><span class="line">             visit(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="先序线索二叉树-1"><a href="#先序线索二叉树-1" class="headerlink" title="先序线索二叉树"></a>先序线索二叉树</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">先序线索二叉树找先序前驱</span><br><span class="line">1、如果能找到p的父节点，且p是左孩子；那么p的父结点即为其前驱</span><br><span class="line">2、如果能找到p的父节点，且p是右孩子，其左兄弟为空；那么p的父节点即为其前驱</span><br><span class="line">3、如果能找到p的父节点，且p是右孩子，其左兄弟非空；那么p的前驱为左兄弟中最后一个被先序遍历的结点</span><br><span class="line">4、如果p是根结点，则没有先序前驱</span><br><span class="line">注意：利用三叉链表可以找到父节点</span><br></pre></td></tr></table></figure><h5 id="后序线索二叉树-1"><a href="#后序线索二叉树-1" class="headerlink" title="后序线索二叉树"></a>后序线索二叉树</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">在后序线索二叉树中找到指定结点*p的后序前驱pre</span><br><span class="line">    若p-&gt;ltag&#x3D;1，则pre&#x3D;p-&gt;lchild</span><br><span class="line">    若p-&gt;ltag&#x3D;0，则p结点肯定有左孩子（也可能有右孩子）</span><br><span class="line">    假设有右孩子，后序遍历的顺序为（左，右，根），那么p的后序前驱就是右孩子</span><br><span class="line">    假设没有右孩子，那肯定就有左孩子，后序遍历的顺序改为（左，根），那么p的后序前驱就是左孩子中按后序遍历最后一个被访问的结点</span><br><span class="line">ThreadNode *Find(ThreadNode *p)&#123;</span><br><span class="line">           if(p-&gt;rchild!&#x3D;NULL)</span><br><span class="line">                 return p-&gt;rchild;</span><br><span class="line">           else</span><br><span class="line">                 return p-&gt;lchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ThreadNode *PreNode(ThreadNode *p)&#123;</span><br><span class="line">          if(p-&gt;ltag&#x3D;&#x3D;0)</span><br><span class="line">                 return Find(p);</span><br><span class="line">          else</span><br><span class="line">                 return p-&gt;lchild;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="找后继"><a href="#找后继" class="headerlink" title="找后继"></a>找后继</h4><h5 id="中序线索二叉树-2"><a href="#中序线索二叉树-2" class="headerlink" title="中序线索二叉树"></a>中序线索二叉树</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">在中序线索二叉树中找到指定结点*p的中序后继next：</span><br><span class="line">    若p-&gt;rtag&#x3D;1，则next&#x3D;p-&gt;rchild;</span><br><span class="line">    若p-&gt;rtag&#x3D;0，则指定的结点肯定有右孩子，所以还需要中序遍历右子树（左，根，右），则next&#x3D;p的右子树最左下结点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;找到以p为根的子树中，第一个被中序遍历的结点</span><br><span class="line">ThreadNode *FirstNode(ThreadNode *p)&#123;</span><br><span class="line">     &#x2F;&#x2F;循环找到最左下角的结点（不一定是叶子结点）</span><br><span class="line">     while(p-&gt;ltag&#x3D;&#x3D;0)</span><br><span class="line">           p&#x3D;p-&gt;lchild;</span><br><span class="line">     return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;在中序线索二叉树中找到指定结点p的后继结点</span><br><span class="line">ThreadNOde *NextNode(ThreadNode *p)&#123;</span><br><span class="line">          &#x2F;&#x2F;右子树中最左下结点</span><br><span class="line">         if(p-&gt;rtag&#x3D;&#x3D;0)</span><br><span class="line">              return FirstNode(p-&gt;rchild);</span><br><span class="line">         else</span><br><span class="line">               return p-&gt;rchild;&#x2F;&#x2F;rtag&#x3D;&#x3D;1，直接返回后继线索</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;对中序线索二叉树进行中序遍历（利用线索实现的非递归算法）</span><br><span class="line">void InOrder(ThreadNode *T)&#123;</span><br><span class="line">       for(ThreadNode *p&#x3D;FirstNode(T);p!&#x3D;NULL;p&#x3D;NextNode(p))</span><br><span class="line">             visit(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="先序线索二叉树-2"><a href="#先序线索二叉树-2" class="headerlink" title="先序线索二叉树"></a>先序线索二叉树</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在先序线索二叉树中找到指定结点*p的先序后继next</span><br><span class="line">    若p-&gt;rtag&#x3D;1，则next&#x3D;p-&gt;rchild</span><br><span class="line">    若p-&gt;rtag&#x3D;0，则指定的结点p肯定有右孩子，（也可能有左孩子）</span><br><span class="line">    假设有左孩子，先序遍历的顺序是（根，左，右），那么p结点的先序后继就是左孩子</span><br><span class="line">    假设没有左孩子，那么p肯定有右孩子，先序遍历的顺序就成了（根，右），那么p的先序后继就是右孩子</span><br><span class="line">注意：先序遍历中，左右子树中的结点只可能是根结点的后继，不可能是前驱！</span><br><span class="line"></span><br><span class="line">ThreadNode *Find(ThreadNode *p)&#123;</span><br><span class="line">        if(p-&gt;lchild!&#x3D;NULL)</span><br><span class="line">             return p-&gt;lchild;</span><br><span class="line">        else</span><br><span class="line">             return p-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ThreadNode *NextNode(ThreadNode *p)&#123;</span><br><span class="line">      if(p-&gt;rtag&#x3D;&#x3D;0)&#123;</span><br><span class="line">            return Find(p);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">           return p-&gt;rchild;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="后序线索二叉树-2"><a href="#后序线索二叉树-2" class="headerlink" title="后序线索二叉树"></a>后序线索二叉树</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">后序线索二叉树找后序后继</span><br><span class="line">    如果能找到p的父节点，且p是右孩子；那么p的父节点就是p的后继</span><br><span class="line">    如果能找到p的父节点，，且p是左孩子，其右兄弟为空；那么p的父节点就是p的后继</span><br><span class="line">    如果能找到p的父节点，p是左孩子，其右兄弟非空；那么p的后继为右兄弟子树中第一个被后序遍历访问的结点</span><br><span class="line">    如果p是根节点，则p没有后序后继</span><br><span class="line">注意：利用三叉链表可以找到父节点</span><br></pre></td></tr></table></figure><h3 id="树-1"><a href="#树-1" class="headerlink" title="树"></a>树</h3><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><h5 id="双亲表示法（顺序存储）"><a href="#双亲表示法（顺序存储）" class="headerlink" title="双亲表示法（顺序存储）"></a>双亲表示法（顺序存储）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">双亲表示法：每个结点中保存指向双亲的“指针”（数组下标）（根结点使用用-1，表示该结点没有双亲（父节点））</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define MAXSIZE 100     &#x2F;&#x2F;树中最多结点数</span><br><span class="line">typedef struct &#123;&#x2F;&#x2F;树的结点定义</span><br><span class="line">    ElemType data;</span><br><span class="line">    int parent;     &#x2F;&#x2F;双亲位置域</span><br><span class="line">&#125;PTNode;</span><br><span class="line">typedef struct &#123;&#x2F;&#x2F;树的类型</span><br><span class="line">    PTNode nodes[MAXSIZE];&#x2F;&#x2F;双亲表示</span><br><span class="line">    int n;&#x2F;&#x2F;结点数</span><br><span class="line">&#125;PTree;</span><br></pre></td></tr></table></figure><h5 id="孩子表示法（顺序-链式存储）"><a href="#孩子表示法（顺序-链式存储）" class="headerlink" title="孩子表示法（顺序+链式存储）"></a>孩子表示法（顺序+链式存储）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">孩子表示法：顺序存储各个结点，每个结点中保存孩子链表头指针</span><br><span class="line"></span><br><span class="line">#define MAXSIZE 100</span><br><span class="line">struct CTNode&#123;</span><br><span class="line">    int child;  &#x2F;&#x2F;孩子结点在数组中的位置</span><br><span class="line">    struct CTNode *next;&#x2F;&#x2F;下一个孩子</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    struct CTNode *firstChild;&#x2F;&#x2F;第一个孩子</span><br><span class="line">&#125;CTBox;</span><br><span class="line">typedef struct &#123;</span><br><span class="line">    CTBox nodes[MAXSIZE];</span><br><span class="line">    int n,r;       &#x2F;&#x2F;结点数 和 根的位置</span><br><span class="line">&#125;CTree;</span><br></pre></td></tr></table></figure><h5 id="孩子兄弟表示法（链式存储）"><a href="#孩子兄弟表示法（链式存储）" class="headerlink" title="孩子兄弟表示法（链式存储）"></a>孩子兄弟表示法（链式存储）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct CSNode&#123;</span><br><span class="line">          ElemType data;</span><br><span class="line">           struct CSNode *firstChild,*nextsibling;&#x2F;&#x2F;第一个孩子和右兄弟指针</span><br><span class="line">&#125;CSNode,*CSTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="树、森林、二叉树的相互转换"><a href="#树、森林、二叉树的相互转换" class="headerlink" title="树、森林、二叉树的相互转换"></a>树、森林、二叉树的相互转换</h3><h4 id="树与二叉树的相互转换"><a href="#树与二叉树的相互转换" class="headerlink" title="树与二叉树的相互转换"></a>树与二叉树的相互转换</h4>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
