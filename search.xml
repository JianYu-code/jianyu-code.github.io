<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>青青草原</title>
      <link href="2021/04/28/qing-qing-cao-yuan/"/>
      <url>2021/04/28/qing-qing-cao-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="青青草原"><a href="#青青草原" class="headerlink" title="青青草原"></a>青青草原</h2><blockquote><p>它穿着短袖出了门，<br>外面寒风刺骨，</p><p>他说，<br>杀不死的人，<br>杀不死的灵魂，<br>去他妈的精神不死，<br>狼死死的盯着这块肉，<br>什么羊都想当肉卷。</p><p>老羊把鲜嫩的肉卖给老狼，<br>换来鲜嫩的草，<br>羊仔瘦骨嶙峋，<br>嘴里高喊着精神至上，<br>灵魂不屈。</p><footer><strong>——————江洋</strong></footer></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
            <tag> 文案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我就那样站着入睡</title>
      <link href="2021/04/27/wo-jiu-na-yang-zhan-zhao-ru-shui/"/>
      <url>2021/04/27/wo-jiu-na-yang-zhan-zhao-ru-shui/</url>
      
        <content type="html"><![CDATA[<h2 id="我就那样站着入睡"><a href="#我就那样站着入睡" class="headerlink" title="我就那样站着入睡"></a>我就那样站着入睡</h2><blockquote><p>眼前的纸张微微发黄<br>我用钢笔在上面凿下深浅不一的黑<br>里面盛满打工的词汇<br>车间、流水线、机台、上岗证、加班、薪水…..<br>我被它们治得服服贴贴<br>我不会呐喊，不会反抗<br>不会控诉，不会埋怨<br>只默默地承受着疲惫，驻足时光之初<br>我只盼望每月十号那张灰色的薪资单<br>赐我以迟到的安慰<br>为此我必须磨去棱角，磨去语言<br>拒绝旷工，拒绝病假，拒绝事假<br>拒绝迟到，拒绝早退<br>流水线旁我站立如铁，双手如飞<br>多少白天，多少黑夜<br>我就那样，站着入睡</p><footer><strong>——————许立志</strong><cite>（富士康已故诗人）</cite></footer></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 诗歌 </tag>
            
            <tag> 文案 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="2021/04/27/shu-ju-jie-gou/"/>
      <url>2021/04/27/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>数据结构(data structure)是带有结构特性的数据元素的集合，它研究的是数据的逻辑结构和数据的物理结构以及它们之间的相互关系，并对这种结构定义相适应的运算，设计出相应的算法，并确保经过这些运算以后所得到的新结构仍保持原来的结构类型。简而言之，数据结构是相互之间存在一种或多种特定关系的数据元素的集合，即带“结构”的数据元素的集合。“结构”就是指数据元素之间存在的关系，分为逻辑结构和存储结构。<br><img src="https://cdn.jsdelivr.net/gh/JianYu-code/image/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.jpg"></p><h1 id="第一章·绪论"><a href="#第一章·绪论" class="headerlink" title="第一章·绪论"></a>第一章·绪论</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><blockquote><p>1、数据：数据是信息的载体，是用户输入字符能够被计算机所识别的符号集合</p><p>2、数据元素：数据元素是数据的基本单位，作为一个整体来看待和处理，一个数据元素是由多个数据项组成的</p><p>3、数据项：数据项是数据的最小单位</p><p>4、数据对象：数据对象是相同类型的数据元素的有限集合，是数据的一个子集</p><p>5、数据结构：数据结构是指数据之间存在一种或多种特定关系的数据元素集合</p><p>6、数据结构的三要素：逻辑结构丶存储结构丶数据的运算</p><p>7、逻辑结构：集合丶线性结构丶树形结构丶图状结构</p><p>8、线性结构：线性表、栈、队列</p><p>9、非线性结构：树、图、集合</p><p>10、存储结构：顺序存储丶链式存储丶索引存储丶散列存储</p><p>11、抽象数据类型：是一个数学模型以及定义在该模型上的一组操作，抽象数据类型的定义取决于它的一组逻辑特性，而与其在计算机内部如何表示和实现无关</p><p>12、抽象数据类型三元组表示法：ADT=(D，S，P)，D是数据对象，S是D上的关系集，P是对D的基本操作集</p><p>13、算法：是对特定问题的求解步骤，指令集</p><p>14、算法的五大特性：有穷性丶确定性丶可行性（有效性）丶输入（0<del>+无穷）丶输出（1</del>+无穷）</p><p>15、算法的设计目标：正确性丶可读性丶健壮性丶算法效率与存储量需求（高效性）</p><p>16、算法分析方法：事后统计、事前分析估算</p><p>17、算法分析：时间复杂度丶空间复杂度</p><p>18、时间复杂度比较：O(1)＜O(log2n)＜O(n)＜O(nlog2n)＜O(n²)＜O(n³)&lt; O(2 n方)&lt; O(n!)&lt; O(nn方)</p></blockquote><h1 id="第二章·线性表"><a href="#第二章·线性表" class="headerlink" title="第二章·线性表"></a>第二章·线性表</h1><h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><blockquote><p>1、线性表是具有相同数据类型的n个(n＞=0)数据元素的有限序列，其中n为表长，当n=0时为空表，</p><p>2、除第一个元素外，每一个元素都有且仅有一个直接前驱，除最后一个元素外，每个元素都有且仅有一个直接后继</p></blockquote><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><blockquote><p>1、顺序表：是指逻辑上相邻的两个元素，在物理上也相邻</p><p>2、顺序表和链表的比较：顺序表可以随机存取也可以顺序存取；链表只能从表头顺序存取</p><p>3、使用数组定义线性表，要知道数组可以静态分配；也可以动态分配；动态分配使用malloc函数</p><p>4、顺序表的优点是：可随机存取，存储密度高；顺序表的缺点是：要求大片连续空间，改变容量不方便</p></blockquote><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><blockquote><p>1、在每个结点中除了包含数据之外，还包含一个指针域，用来指向其后继结点</p><p>2、带头结点的单链表头指针始终不等于NULL，head-&gt;next等于NULL时，链表为空</p><p>3、不带头结点的单链表头结点直接指向开始结点，head等于NULL时，链表为空</p><p>4、单链表的优点：不要求一大片连续的空间，改变容量方便；单链表的缺点：不可随机存取，要花费一定空间存放指针</p></blockquote><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><blockquote><p>1、带头结点的双链表，当head-&gt;next为NULL时链表为空</p><p>2、不带头结点的双链表，当head为NULL时链表为空</p><p>3、初始化时，双链表的前驱指针和后继指针都指向NULL</p></blockquote><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><blockquote><p>1、循环单链表和循环双链表都是由对应的单链表和双链表改造而来的，只要在终端结点和头结点(或开始结点)间建立联系即可。</p><p>2、循环双链表头结点（或开始结点）的prior指针指向终端结点；终端结点的next指针指向头结点</p><p>3、循环单链表（带头结点），head=head-&gt;next时，为空链表</p><p>4、循环单链表（不带头结点），head = NULL时，为空链表</p><p>5、循环双链表（带头结点），head = head-&gt;next 或 head = head-&gt;prior时，为空链表</p><p>6、循环双链表（不带头结点），head=NULL时，为空链表</p></blockquote><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><blockquote><p>1、静态链表：分配一整片连续的内存空间，各个结点集中安置</p><p>2、0号结点充当头结点，游标为-1表示最后一个结点</p><p>3、每个数据元素4B，每个游标4B，（每个结点共8B）设起始地址为addr；找某个元素的地址为：addr+8*下标</p></blockquote><h2 id="2、操作"><a href="#2、操作" class="headerlink" title="2、操作"></a>2、操作</h2><h3 id="顺序表-1"><a href="#顺序表-1" class="headerlink" title="顺序表"></a>顺序表</h3><h4 id="顺序表——静态分配"><a href="#顺序表——静态分配" class="headerlink" title="顺序表——静态分配"></a>顺序表——静态分配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> ElemType data[MAXSIZE];</span><br><span class="line"> int length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;基本操作——初始化一个顺序表</span><br><span class="line">void InitList(SqList &amp;L)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    L.data[i] &#x3D; 0;</span><br><span class="line">    L.length &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"> SqList L;</span><br><span class="line"> InitList(L);</span><br><span class="line"> &#x2F;&#x2F;.....一系列操作</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顺序表——动态分配"><a href="#顺序表——动态分配" class="headerlink" title="顺序表——动态分配"></a>顺序表——动态分配</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#define INITSIZE 10 &#x2F;&#x2F;顺序表初始长度</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> ElemType *data;</span><br><span class="line"> int MaxSize; &#x2F;&#x2F;顺序表的最大容量</span><br><span class="line"> int length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;基本操作——初始化一个顺序表</span><br><span class="line">void InitList(SeqList &amp;L)&#123;</span><br><span class="line"> L.data &#x3D; (ElemType *)malloc(sizeof(ElemType)*INITSIZE);</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    L.data[i] &#x3D; 0;</span><br><span class="line"> L.length &#x3D; 0;</span><br><span class="line"> L.MaxSize &#x3D; INITSIZE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;添加动态数组的长度</span><br><span class="line">void IncreaseSize(SeqList &amp;L,int len)&#123;</span><br><span class="line"> int *p &#x3D; L.data;</span><br><span class="line"> L.data &#x3D; (int *)malloc((L.MaxSize+len)*sizeof(int));</span><br><span class="line"> for(int i &#x3D; 0;i&lt;L.length;i++)</span><br><span class="line">    L.data[i] &#x3D; p[i];</span><br><span class="line"> L.MaxSize &#x3D; L.MaxSize+len;</span><br><span class="line"> free(p);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line"> SeqList L;</span><br><span class="line"> InitList(L);</span><br><span class="line"> &#x2F;&#x2F;.....一系列操作</span><br><span class="line"> IncreaseSize(L,5);</span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作</span><br><span class="line">bool InsertList(SqList &amp;L,int e,int i)&#123;</span><br><span class="line"> if(i&lt;1 || i&gt;L.length+1)</span><br><span class="line">    return false;</span><br><span class="line"> if(L.length&gt;&#x3D;MAXSIZE)</span><br><span class="line">    return false;</span><br><span class="line"> for(int j &#x3D; L.length;j&gt;&#x3D;i;j--)</span><br><span class="line">    L.data[j] &#x3D; L.data[j-1];</span><br><span class="line"> L.data[i-1] &#x3D; e;</span><br><span class="line"> L.length++;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line">时间复杂度为：O(n)</span><br></pre></td></tr></table></figure><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作</span><br><span class="line">bool DeleteList(SqList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1||i&gt;L.length)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; L.data[i-1];</span><br><span class="line"> for(int j &#x3D; i;j&lt;&#x3D;L.length;j++)</span><br><span class="line">    L.data[j-1] &#x3D; L.data[j];</span><br><span class="line"> L.length--;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line">时间复杂度为：O(n)</span><br></pre></td></tr></table></figure><h4 id="按位查找"><a href="#按位查找" class="headerlink" title="按位查找"></a>按位查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;按位查找</span><br><span class="line"> int GetElem(SqList L,int i)&#123;</span><br><span class="line">  return L.data[i-1];</span><br><span class="line"> &#125; </span><br><span class="line">时间复杂度：O(1)</span><br></pre></td></tr></table></figure><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;按值查找</span><br><span class="line"> int LocateElem(SqList L,int e)&#123;</span><br><span class="line">  for(int i &#x3D; 0;i&lt;L.length;i++)</span><br><span class="line">    if(L.data[i]&#x3D;&#x3D;e)</span><br><span class="line">        return i+1;</span><br><span class="line">  return 0;</span><br><span class="line"> &#125;</span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h3 id="单链表-1"><a href="#单链表-1" class="headerlink" title="单链表"></a>单链表</h3><blockquote><p>注意：带头结点代码中的L是指向头结点的，而L-&gt;next是指向首元结点（首个值结点）</p><p>不带头结点代码中的L是指向首元结点的。</p></blockquote><h4 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct LNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct LNode *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><h4 id="带头结点"><a href="#带头结点" class="headerlink" title="带头结点"></a>带头结点</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct LNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool InitList(LinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; (LNode *)malloc(sizeof(LNode));&#x2F;&#x2F;分配一个头结点</span><br><span class="line"> if(L&#x3D;&#x3D;NULL) &#x2F;&#x2F;内存不足，分配失败 </span><br><span class="line">    return false;</span><br><span class="line"> L-&gt;next &#x3D; NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 </span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line"> LinkList L;</span><br><span class="line"> InitList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入操作-1"><a href="#插入操作-1" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bool ListInsert(LinkList &amp;L,int i,ElemType e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *p; &#x2F;&#x2F;指针p指向当前被扫描到的结点 </span><br><span class="line"> int j &#x3D; 0; &#x2F;&#x2F;当前指向的是第几个结点 </span><br><span class="line"> p &#x3D; L; &#x2F;&#x2F;L指向头结点，头结点是第0个结点（不存数据）</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">     p &#x3D; p-&gt;next;</span><br><span class="line">     j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL) &#x2F;&#x2F;i值不合法 </span><br><span class="line">    return false;</span><br><span class="line"> LNode *s &#x3D; (LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;新的结点</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next &#x3D; s; &#x2F;&#x2F;将结点s连到p之后</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h5 id="删除操作-1"><a href="#删除操作-1" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">bool ListDelete(LinkList &amp;L,int i,ElemType &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *p;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> p &#x3D; L;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">     p &#x3D; p-&gt;next;</span><br><span class="line">     j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> if(p-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *q &#x3D; p-&gt;next;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h5 id="按位查找-1"><a href="#按位查找-1" class="headerlink" title="按位查找"></a>按位查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LNode * GetElem(LinkList L,int i)&#123;</span><br><span class="line"> if(i&lt;0)</span><br><span class="line">    return NULL;</span><br><span class="line"> LNode *p;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> p &#x3D; L;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：平均O(n)</span><br></pre></td></tr></table></figure><h5 id="按值查找-1"><a href="#按值查找-1" class="headerlink" title="按值查找"></a>按值查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LNode * LocateElem(LinkList L,ElemType e)&#123;</span><br><span class="line"> LNode *p &#x3D; L-&gt;next;</span><br><span class="line"> &#x2F;&#x2F;从第一个结点开始查找数据域为e的结点 </span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; p-&gt;data!&#x3D;e)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line"> &#125;</span><br><span class="line"> return p;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度:平均O(n)</span><br></pre></td></tr></table></figure><h5 id="求表长"><a href="#求表长" class="headerlink" title="求表长"></a>求表长</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int Length(LinkList L)&#123;</span><br><span class="line"> LNode *p &#x3D; L;</span><br><span class="line"> int len &#x3D; 0;</span><br><span class="line"> while(p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line"> &#125;</span><br><span class="line"> return len;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：平均O(n)</span><br></pre></td></tr></table></figure><h5 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LinkList List_TailInsert(LinkList &amp;L)&#123;</span><br><span class="line"> int x;</span><br><span class="line"> L &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> LNode *s,*r &#x3D; L;</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> while(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    r-&gt;next &#x3D; s;</span><br><span class="line">    r &#x3D; s;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> &#125;</span><br><span class="line"> r-&gt;next &#x3D; NULL;</span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：O(n)</span><br></pre></td></tr></table></figure><h5 id="头插法建立单链表"><a href="#头插法建立单链表" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">LinkList List_HeadInsert(LinkList &amp;L)&#123;</span><br><span class="line"> LNode *s;</span><br><span class="line"> int x;</span><br><span class="line"> L &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> L-&gt;next &#x3D; NULL; &#x2F;&#x2F;初始为空链表</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> while(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    s-&gt;next &#x3D; L-&gt;next;</span><br><span class="line">    L-&gt;next &#x3D; s;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> &#125;</span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：O(n)</span><br></pre></td></tr></table></figure><h5 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(LinkList L)&#123;</span><br><span class="line"> if(L-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表的逆置"><a href="#链表的逆置" class="headerlink" title="链表的逆置"></a>链表的逆置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LinkList Inversion(LinkList L)&#123;</span><br><span class="line"> LNode *p,*r;</span><br><span class="line"> p &#x3D; L-&gt;next;  </span><br><span class="line"> L-&gt;next &#x3D; NULL; &#x2F;&#x2F;断链</span><br><span class="line"> while(p!&#x3D;NULL)&#123;</span><br><span class="line">    r &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; L-&gt;next;</span><br><span class="line">    L-&gt;next &#x3D; p;</span><br><span class="line">    p &#x3D; r;</span><br><span class="line"> &#125; </span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不带头结点"><a href="#不带头结点" class="headerlink" title="不带头结点"></a>不带头结点</h4><h5 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">typedef struct LNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct LNode *next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bool InitList(LinkList &amp;L)&#123;</span><br><span class="line"> L&#x3D;NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line"> LinkList L;</span><br><span class="line"> InitList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入操作-2"><a href="#插入操作-2" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">bool ListInsert(LinkList &amp;L,int i,ElemType e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;1)&#123;</span><br><span class="line">    LNode *s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line"> LNode *p; &#x2F;&#x2F;指针p指向当前被扫描到的结点 </span><br><span class="line"> int j &#x3D; 1; &#x2F;&#x2F;当前指向的是第几个结点 </span><br><span class="line"> p &#x3D; L; &#x2F;&#x2F;L指向首元结点，首元结点是第1个结点</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL) &#x2F;&#x2F;i值不合法 </span><br><span class="line">    return false;</span><br><span class="line"> LNode *s &#x3D; (LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;新的结点</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next &#x3D; s; &#x2F;&#x2F;将结点s连到p之后</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h5 id="删除操作-2"><a href="#删除操作-2" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">bool ListDelete(LinkList &amp;L,int i,ElemType &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;&#x3D;1)&#123;</span><br><span class="line">    LNode *q &#x3D; L;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    L &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> LNode *p;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> p &#x3D; L;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> if(p-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *q &#x3D; p-&gt;next;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：最好O(1)</span><br><span class="line"> 最坏O(n)</span><br><span class="line"> 平均O(n)</span><br></pre></td></tr></table></figure><h5 id="按位查找-2"><a href="#按位查找-2" class="headerlink" title="按位查找"></a>按位查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LNode * GetElem(LinkList L,int i)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return NULL;</span><br><span class="line"> LNode *p;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> p &#x3D; L;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> return p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：平均O(n)</span><br></pre></td></tr></table></figure><h5 id="按值查找-2"><a href="#按值查找-2" class="headerlink" title="按值查找"></a>按值查找</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LNode * LocateElem(LinkList L,ElemType e)&#123;</span><br><span class="line"> LNode *p &#x3D; L;</span><br><span class="line"> if(p-&gt;data&#x3D;&#x3D;e)</span><br><span class="line">    return p;</span><br><span class="line"> else</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; p-&gt;data!&#x3D;e)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line"> &#125;</span><br><span class="line"> return p;</span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度:平均O(n)</span><br></pre></td></tr></table></figure><h5 id="求表长-1"><a href="#求表长-1" class="headerlink" title="求表长"></a>求表长</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">int Length(LinkList L)&#123;</span><br><span class="line"> LNode *p &#x3D; L;</span><br><span class="line"> int len &#x3D; 0;</span><br><span class="line"> if(p!&#x3D;NULL)</span><br><span class="line">    len++;</span><br><span class="line"> while(p-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line"> &#125;</span><br><span class="line"> return len;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：平均O(n)</span><br></pre></td></tr></table></figure><h5 id="尾插法建立单链表-1"><a href="#尾插法建立单链表-1" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">LinkList List_TailInsert(LinkList &amp;L)&#123;</span><br><span class="line"> int x;</span><br><span class="line"> LNode *s,*r&#x3D;L;</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> if(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    r &#x3D; s;</span><br><span class="line">&#125;</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> while(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    r-&gt;next &#x3D; s;</span><br><span class="line">    r &#x3D; s;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> &#125;</span><br><span class="line"> r-&gt;next &#x3D; NULL;</span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：O(n)</span><br></pre></td></tr></table></figure><h5 id="头插法建立单链表-1"><a href="#头插法建立单链表-1" class="headerlink" title="头插法建立单链表"></a>头插法建立单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">LinkList List_HeadInsert(LinkList &amp;L)&#123;</span><br><span class="line"> LNode *s,*r;</span><br><span class="line"> int x;</span><br><span class="line"> L &#x3D; NULL; &#x2F;&#x2F;初始化空链表</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> while(x!&#x3D;99999)&#123;</span><br><span class="line">    s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line">    s-&gt;data &#x3D; x;</span><br><span class="line">    s-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line"> &#125;</span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判空-1"><a href="#判空-1" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(LinkList L)&#123;</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="链表的逆置-1"><a href="#链表的逆置-1" class="headerlink" title="链表的逆置"></a>链表的逆置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">LinkList Inversion(LinkList L)&#123;</span><br><span class="line"> LNode *p,*r;</span><br><span class="line"> p &#x3D; L;  </span><br><span class="line"> L &#x3D; NULL; &#x2F;&#x2F;断链</span><br><span class="line"> while(p!&#x3D;NULL)&#123;</span><br><span class="line">    r &#x3D; p-&gt;next;</span><br><span class="line">    p-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; p;</span><br><span class="line">    p &#x3D; r;</span><br><span class="line"> &#125; </span><br><span class="line"> return L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不分类操作"><a href="#不分类操作" class="headerlink" title="不分类操作"></a>不分类操作</h4><h5 id="结点的后插"><a href="#结点的后插" class="headerlink" title="结点的后插"></a>结点的后插</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool InsertNextNode(LNode *p;ElemType e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL) &#x2F;&#x2F;内存分配失败 </span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：O(1)</span><br></pre></td></tr></table></figure><h5 id="结点的前插"><a href="#结点的前插" class="headerlink" title="结点的前插"></a>结点的前插</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool InsertBeforeNode(LNode *p,ElemType e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *s &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> s-&gt;data &#x3D; p-&gt;data;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;data &#x3D; e;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">时间复杂度：O(1)</span><br></pre></td></tr></table></figure><h5 id="结点的删除"><a href="#结点的删除" class="headerlink" title="结点的删除"></a>结点的删除</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteNode(LNode *p,ElemType &amp;e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LNode *q &#x3D; p-&gt;next;</span><br><span class="line"> e &#x3D; p-&gt;data;</span><br><span class="line"> p-&gt;data &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">时间复杂度：O(1)</span><br><span class="line"></span><br><span class="line">注意：这个操作对删除最后一个结点无效！ 想要实现还得逐个便利链表找到要删除结点的前驱 时间复杂度：O(n)</span><br></pre></td></tr></table></figure><h3 id="双链表-1"><a href="#双链表-1" class="headerlink" title="双链表"></a>双链表</h3><h4 id="结构体定义-1"><a href="#结构体定义-1" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct DNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct DNode *prior,*next;</span><br><span class="line">&#125;DNode,*DLinkList; </span><br></pre></td></tr></table></figure><h4 id="带头结点-1"><a href="#带头结点-1" class="headerlink" title="带头结点"></a>带头结点</h4><h5 id="初始化-2"><a href="#初始化-2" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool InitList(DLinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> L-&gt;prior &#x3D; NULL; &#x2F;&#x2F;头结点的prior永远指向空</span><br><span class="line"> L-&gt;next &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line"> DLinkList L;</span><br><span class="line"> InitList(L);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判空-2"><a href="#判空-2" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(DLinkList L)&#123;</span><br><span class="line"> if(L-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="插入操作-3"><a href="#插入操作-3" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">bool InsertDNode(DLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> if(p-&gt;next!&#x3D;NULL)</span><br><span class="line">    p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除操作-3"><a href="#删除操作-3" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteDNode(DLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> if(q-&gt;next!&#x3D;NULL)</span><br><span class="line">    q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="销毁链表"><a href="#销毁链表" class="headerlink" title="销毁链表"></a>销毁链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool DestoryList(DLinkList &amp;L)&#123;</span><br><span class="line"> while(L-&gt;next!&#x3D;NULL)&#123;</span><br><span class="line">    DeleteNextNode(L);</span><br><span class="line"> &#125;</span><br><span class="line"> free(L);</span><br><span class="line"> L&#x3D;NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不带头结点-1"><a href="#不带头结点-1" class="headerlink" title="不带头结点"></a>不带头结点</h4><h5 id="初始化-3"><a href="#初始化-3" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bool InitDList(DLinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; NULL; </span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="判空-3"><a href="#判空-3" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(DLinkList L)&#123;</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="插入操作-4"><a href="#插入操作-4" class="headerlink" title="插入操作"></a>插入操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">bool InsertDNode(DLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;1)&#123;</span><br><span class="line">    DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;prior &#x3D; NULL;</span><br><span class="line">    s-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> if(p-&gt;next!&#x3D;NULL)</span><br><span class="line">    p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line">    p-&gt;next &#x3D; s;</span><br><span class="line">    s-&gt;prior &#x3D; p;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除操作-4"><a href="#删除操作-4" class="headerlink" title="删除操作"></a>删除操作</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteDNode(DLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;&#x3D;1)&#123;</span><br><span class="line">    DNode *q &#x3D; L;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    L &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> if(q-&gt;next!&#x3D;NULL)</span><br><span class="line">    q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="销毁链表-1"><a href="#销毁链表-1" class="headerlink" title="销毁链表"></a>销毁链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool DestoryList(DLinkList &amp;L)&#123;</span><br><span class="line"> while(L!&#x3D;NULL)&#123;</span><br><span class="line">    DeleteNextNode(L);</span><br><span class="line"> &#125;</span><br><span class="line"> free(L);</span><br><span class="line"> L&#x3D;NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不分类操作-1"><a href="#不分类操作-1" class="headerlink" title="不分类操作"></a>不分类操作</h4><h5 id="插入操作（后插）"><a href="#插入操作（后插）" class="headerlink" title="插入操作（后插）"></a>插入操作（后插）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool InsertNextDNode(DNode *p,DNode *s)&#123;</span><br><span class="line"></span><br><span class="line"> if(p&#x3D;&#x3D;NULL || s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> if(p-&gt;next!&#x3D;NULL)</span><br><span class="line">    p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="插入操作（前插）"><a href="#插入操作（前插）" class="headerlink" title="插入操作（前插）"></a>插入操作（前插）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool InsertBeforeDNode(DNode *p,DNode *s)&#123;</span><br><span class="line"></span><br><span class="line"> if(p&#x3D;&#x3D;NULL || s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;next &#x3D; p;</span><br><span class="line"> s-&gt;prior &#x3D; p-&gt;prior;</span><br><span class="line"> p-&gt;prior-&gt;next &#x3D; s;</span><br><span class="line"> p-&gt;prior &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">双链表不用像单链表的前插那样换位置了，有前驱指针就是硬气！</span><br></pre></td></tr></table></figure><h5 id="删除操作（后删）"><a href="#删除操作（后删）" class="headerlink" title="删除操作（后删）"></a>删除操作（后删）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteNextDNode(DNode *p,int &amp;e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false; </span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> if(q-&gt;next!&#x3D;NULL)</span><br><span class="line">    q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="删除操作（前删）"><a href="#删除操作（前删）" class="headerlink" title="删除操作（前删）"></a>删除操作（前删）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool DeleteBeforeDNode(DNode *p,int &amp;e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;prior;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> q-&gt;prior-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> p-&gt;prior &#x3D; q-&gt;prior;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双链表的遍历"><a href="#双链表的遍历" class="headerlink" title="双链表的遍历"></a>双链表的遍历</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">后向遍历</span><br><span class="line">while(p!&#x3D;NULL)&#123;</span><br><span class="line"> p &#x3D; p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">前向遍历</span><br><span class="line">while(p!&#x3D;NULL)&#123;</span><br><span class="line"> p &#x3D; p-&gt;prior;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">前向遍历（跳过头结点）</span><br><span class="line">while(p-&gt;prior!&#x3D;NULL)&#123;</span><br><span class="line"> p &#x3D; p-&gt;prior;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表-1"><a href="#循环链表-1" class="headerlink" title="循环链表"></a>循环链表</h3><blockquote><p>没展示的操作就是与普通单/双链表的操作一致</p></blockquote><h4 id="结构体定义-2"><a href="#结构体定义-2" class="headerlink" title="结构体定义"></a>结构体定义</h4><h5 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct LNode *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><h5 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct DNode&#123;</span><br><span class="line"> ElemType data;</span><br><span class="line"> struct DNode *prior,*next;</span><br><span class="line">&#125;DNode,*DLinkList; </span><br></pre></td></tr></table></figure><h4 id="循环单链表-1"><a href="#循环单链表-1" class="headerlink" title="循环单链表"></a>循环单链表</h4><h5 id="带头结点-2"><a href="#带头结点-2" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="初始化-4"><a href="#初始化-4" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitList(LinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; (LNode *)malloc(sizeof(LNode));</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line"> return false;</span><br><span class="line"> L-&gt;next &#x3D; L; &#x2F;&#x2F;头结点next指向头结点</span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判空-4"><a href="#判空-4" class="headerlink" title="判空"></a>判空</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(LinkList L)&#123;</span><br><span class="line"> if(L-&gt;next &#x3D;&#x3D; L)</span><br><span class="line"> return true;</span><br><span class="line"> else</span><br><span class="line"> return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不带头结点-2"><a href="#不带头结点-2" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="初始化-5"><a href="#初始化-5" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitList(LinkList &amp;L)&#123;</span><br><span class="line"> L&#x3D; NULL; </span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判空-5"><a href="#判空-5" class="headerlink" title="判空"></a>判空</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(LinkList L)&#123;</span><br><span class="line"> if(L &#x3D;&#x3D; NULL)</span><br><span class="line"> return true;</span><br><span class="line"> else</span><br><span class="line"> return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环双链表-1"><a href="#循环双链表-1" class="headerlink" title="循环双链表"></a>循环双链表</h4><h5 id="带头结点-3"><a href="#带头结点-3" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="初始化-6"><a href="#初始化-6" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitDLink(DLinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(L&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> L-&gt;prior &#x3D; L;</span><br><span class="line"> L-&gt;next &#x3D; L;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判空-6"><a href="#判空-6" class="headerlink" title="判空"></a>判空</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(DLinkList L)&#123;</span><br><span class="line"> if(L-&gt;next &#x3D;&#x3D; L || L-&gt;prior &#x3D;&#x3D; L)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="插入操作-5"><a href="#插入操作-5" class="headerlink" title="插入操作"></a>插入操作</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作</span><br><span class="line">bool InsertDNode(DLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="删除操作-5"><a href="#删除操作-5" class="headerlink" title="删除操作"></a>删除操作</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作</span><br><span class="line">bool DeleteDNode(DLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 0;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="不带头结点-3"><a href="#不带头结点-3" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="初始化-7"><a href="#初始化-7" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitDLink(DLinkList &amp;L)&#123;</span><br><span class="line"> L &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="判空-7"><a href="#判空-7" class="headerlink" title="判空"></a>判空</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(DLinkList L)&#123;</span><br><span class="line"> if(L &#x3D;&#x3D; NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="插入操作-6"><a href="#插入操作-6" class="headerlink" title="插入操作"></a>插入操作</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作</span><br><span class="line">bool InsertDNode(DLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;1)&#123;</span><br><span class="line">    DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;prior &#x3D; NULL;</span><br><span class="line">    s-&gt;next &#x3D; L;</span><br><span class="line">    L &#x3D; s;</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *s &#x3D; (DNode *)malloc(sizeof(DNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="删除操作-6"><a href="#删除操作-6" class="headerlink" title="删除操作"></a>删除操作</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作</span><br><span class="line">bool DeleteDNode(DLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1)</span><br><span class="line">    return false;</span><br><span class="line"> if(i&#x3D;&#x3D;1)&#123;</span><br><span class="line">    DNode *q &#x3D; L;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    L &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line">    return true;</span><br><span class="line"> &#125;</span><br><span class="line"> DNode *p &#x3D; L;</span><br><span class="line"> int j &#x3D; 1;</span><br><span class="line"> while(p!&#x3D;NULL &amp;&amp; j&lt;i-1)&#123;</span><br><span class="line">    p &#x3D; p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line"> &#125; </span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不分类操作-2"><a href="#不分类操作-2" class="headerlink" title="不分类操作"></a>不分类操作</h5><h6 id="插入操作（后插）-1"><a href="#插入操作（后插）-1" class="headerlink" title="插入操作（后插）"></a>插入操作（后插）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作（后插）</span><br><span class="line">bool InsertNextDNode(DNode *p,DNode *s)&#123;</span><br><span class="line"></span><br><span class="line"> if(p&#x3D;&#x3D;NULL || s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next-&gt;prior &#x3D; s;</span><br><span class="line"> s-&gt;prior &#x3D; p;</span><br><span class="line"> p-&gt;next &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="删除操作（后删）-1"><a href="#删除操作（后删）-1" class="headerlink" title="删除操作（后删）"></a>删除操作（后删）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作（后删）</span><br><span class="line">bool DeleteNextDNode(DNode *p,int &amp;e)&#123;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> DNode *q &#x3D; p-&gt;next;</span><br><span class="line"> if(q&#x3D;&#x3D;NULL)</span><br><span class="line">    return false; </span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> q-&gt;next-&gt;prior &#x3D; p;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态链表-1"><a href="#静态链表-1" class="headerlink" title="静态链表"></a>静态链表</h3><h4 id="结构体定义-3"><a href="#结构体定义-3" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct SNode&#123;</span><br><span class="line"> ElemType data; </span><br><span class="line"> int next; &#x2F;&#x2F;下一个元素的数组下标 </span><br><span class="line">&#125;SLinkList[MAXSIZE];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void testSLinkList()&#123;</span><br><span class="line"> SLinkList s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="初始化-8"><a href="#初始化-8" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitSLinkList(SLinkList &amp;L)&#123;</span><br><span class="line"> L[0].next &#x3D; -1; </span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)&#123;</span><br><span class="line">    L[i].next &#x3D; 0; &#x2F;&#x2F;除头结点外，其他无值结点的next游标值初始为0； </span><br><span class="line">     L[i].data &#x3D; 0; &#x2F;&#x2F;值域全部初始为0，避免脏数据 </span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="获取链表结点数"><a href="#获取链表结点数" class="headerlink" title="获取链表结点数"></a>获取链表结点数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;求链表已存结点个数</span><br><span class="line">int ListLength(SLinkList L)&#123;</span><br><span class="line"> int len,sum,end;</span><br><span class="line"> len &#x3D; 0;</span><br><span class="line"> sum &#x3D; 0;</span><br><span class="line"> end &#x3D; MAXSIZE-1; &#x2F;&#x2F;链表最底结点（非终端结点）</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];</span><br><span class="line"> while(sum!&#x3D;end)&#123;</span><br><span class="line">    if(p-&gt;next!&#x3D;-2)</span><br><span class="line">        len++;</span><br><span class="line">    p++;</span><br><span class="line">    sum++;</span><br><span class="line"> &#125;</span><br><span class="line"> return len-1; &#x2F;&#x2F;头结点不计算在内</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入操作-7"><a href="#插入操作-7" class="headerlink" title="插入操作"></a>插入操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;插入操作</span><br><span class="line">bool InsertSLinkList(SLinkList &amp;L,int i,int e)&#123;</span><br><span class="line"> if(i&lt;1 || i&gt;ListLength(L)+1)</span><br><span class="line">    return false;</span><br><span class="line"> </span><br><span class="line"> if(i&lt;&#x3D;ListLength(L))&#123;</span><br><span class="line">    int index_1 &#x3D; 0;</span><br><span class="line">    SNode *p &#x3D; &amp;L[0];&#x2F;&#x2F;找到位序为i的结点 </span><br><span class="line">    SNode *q &#x3D; &amp;L[0];</span><br><span class="line">    SNode *s &#x3D; &amp;L[0];&#x2F;&#x2F;查找第i位序的前驱结点 </span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    while(sum!&#x3D;i)&#123;</span><br><span class="line">        index_1 &#x3D; p-&gt;next;&#x2F;&#x2F;位序为i结点的下标 </span><br><span class="line">        p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">        sum++;&#x2F;&#x2F;记录第几个结点 </span><br><span class="line">    &#125;</span><br><span class="line">    while(s-&gt;next!&#x3D;index_1)&#123;</span><br><span class="line">        s++;</span><br><span class="line">    &#125; </span><br><span class="line">    int a &#x3D; 0;&#x2F;&#x2F;记录空闲结点的下标 </span><br><span class="line">    while(true)&#123;</span><br><span class="line">        if(q-&gt;next&#x3D;&#x3D;-2)&#123;</span><br><span class="line">            printf(&quot;当前下标为:%d,是否插入元素？(Yes:1&#x2F;No:0)\n&quot;,a);</span><br><span class="line">            int num;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line">            if(num)&#123;</span><br><span class="line">                q-&gt;data &#x3D; e;</span><br><span class="line">                q-&gt;next &#x3D; index_1;&#x2F;&#x2F;新节点的next指向原第i位序的结点 </span><br><span class="line">                s-&gt;next &#x3D; a;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        q++;</span><br><span class="line">        a++;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;&#x2F;&#x2F;-----------------------------------------------</span><br><span class="line">    int index &#x3D; 0;</span><br><span class="line">    int end &#x3D; MAXSIZE-1;</span><br><span class="line">    SNode *p &#x3D; &amp;L[0];</span><br><span class="line">    SNode *q &#x3D; &amp;L[0];</span><br><span class="line">    while(q-&gt;next!&#x3D;-1)</span><br><span class="line">        q++;</span><br><span class="line">    while(index!&#x3D;end+1)&#123;</span><br><span class="line">        if(p-&gt;next&#x3D;&#x3D;-2)&#123;</span><br><span class="line">            printf(&quot;当前下标为:%d,是否插入元素？(Yes:1&#x2F;No:0)\n&quot;,index);</span><br><span class="line">            int num;</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line">            if(num)&#123;</span><br><span class="line">                p-&gt;data &#x3D; e;</span><br><span class="line">                p-&gt;next &#x3D; -1;</span><br><span class="line">                q-&gt;next &#x3D; index;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        p++;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历整个链表"><a href="#遍历整个链表" class="headerlink" title="遍历整个链表"></a>遍历整个链表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">void GetAllSLinkList(SLinkList L)&#123;</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];</span><br><span class="line"> printf(&quot;L[0] &#x3D; 头结点 \n&quot;);</span><br><span class="line"> for(int i &#x3D; 1;i&lt;&#x3D;ListLength(L);i++)&#123;</span><br><span class="line">    p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">    printf(&quot;L[%d] &#x3D; %d \n&quot;,i,p-&gt;data);</span><br><span class="line"> &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="按位查找-3"><a href="#按位查找-3" class="headerlink" title="按位查找"></a>按位查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int GetElem(SLinkList L,int i)&#123;</span><br><span class="line"> int index &#x3D; 0;</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];</span><br><span class="line"> while(index!&#x3D;i)&#123;</span><br><span class="line">    p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">    index++;</span><br><span class="line"> &#125; </span><br><span class="line"> return p-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按值查找-3"><a href="#按值查找-3" class="headerlink" title="按值查找"></a>按值查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int LocateElem(SLinkList L,int e)&#123;</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];</span><br><span class="line"> int index &#x3D; 0;</span><br><span class="line"> while(p-&gt;data!&#x3D;e)&#123;</span><br><span class="line">    p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">    index++;</span><br><span class="line"> &#125;</span><br><span class="line"> return index;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作-7"><a href="#删除操作-7" class="headerlink" title="删除操作"></a>删除操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;删除操作 </span><br><span class="line">bool DeleteSLinkList(SLinkList &amp;L,int i,int &amp;e)&#123;</span><br><span class="line"> if(i&lt;1 || i&gt;ListLength(L))</span><br><span class="line">    return false;</span><br><span class="line"> SNode *p &#x3D; &amp;L[0];&#x2F;&#x2F;找到i位序的结点 </span><br><span class="line"> SNode *q &#x3D; &amp;L[0];&#x2F;&#x2F;找到i位序结点的前驱</span><br><span class="line"> int index &#x3D; 0;&#x2F;&#x2F;记录下标 </span><br><span class="line"> int num &#x3D; 0;&#x2F;&#x2F;记录第几个结点 </span><br><span class="line"> while(num!&#x3D;i)&#123;</span><br><span class="line">    index &#x3D; p-&gt;next;</span><br><span class="line">    p &#x3D; &amp;L[p-&gt;next];</span><br><span class="line">    num++;</span><br><span class="line"> &#125; </span><br><span class="line"> while(q-&gt;next!&#x3D;index)&#123;</span><br><span class="line">    q &#x3D; &amp;L[q-&gt;next];</span><br><span class="line"> &#125;</span><br><span class="line"> e &#x3D; p-&gt;data;</span><br><span class="line"> q-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> p-&gt;next &#x3D; -2;</span><br><span class="line"> p-&gt;data &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章·栈和队列"><a href="#第三章·栈和队列" class="headerlink" title="第三章·栈和队列"></a>第三章·栈和队列</h1><h2 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h2><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><blockquote><p>队列：是只允许在一端进行插入；在另一端删除的线性表</p><p>1、空队列：队列中无数据</p><p>2、队头：删除操作的那一端</p><p>3、队尾：插入操作的那一端</p><p>4、队列的特点：先进先出</p></blockquote><h4 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h4><blockquote><p>1、顺序队列与循环队列的操作相同</p></blockquote><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><blockquote><p>1、用模运算将存储空间在逻辑上变成“环状”</p><p>2、会牺牲一个存储单元（判满所需）</p><p>3、不想牺牲一个存储单元并且还想进行无歧义的判满&amp;判空，方案①：可以在结构体定义时加上一个size变量，用来你记录当前队列结点个数。<br>方案②：在结构体定义时加上一个tag变量，用来记录最近是入队还是出队的操作；入队：tag = 1；出队 tag = 0。</p><p>4、(Q.rear+MAXSIZE-Q.front)%MAXSIZE，可以得到当前队列的元素个数</p></blockquote><h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4><blockquote><p>1、链队列的带头结点判空条件可以是：Q.front==Q.rear；也可以是：Q.front-&gt;next==NULL</p><p>2、不带头结点的判空条件是：Q.front==NULL</p></blockquote><h4 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h4><blockquote><p>1、双端队列：是只允许从两端插入、两端删除的线性表</p><p>2、还存在输入受限的双端队列和输出受限的双端队列</p><p>3、输入受限的双端队列：只允许从一端插入，两端删除的线性表</p><p>4、输出受限的双端队列：只允许从一端删除，两端插入的线性表</p></blockquote><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote><p>1、栈：是只允许在一端进行插入或删除操作的线性表</p><p>2、栈顶：指允许插入或删除操作的一端</p><p>3、空栈：无数据的栈</p><p>4、栈底：指不允许插入或删除的一端</p><p>5、栈顶元素：是新插入的元素；栈底元素：是第一个被插入的元素</p><p>6、栈的特点：后进先出</p></blockquote><h4 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h4><blockquote><p>1、与顺序表类似</p><p>2、初始化时top可为-1或0，但是操作有细微不同，不同在变动S.top</p></blockquote><h4 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h4><blockquote><p>1、两个栈共享同一片内存空间，两个栈从两边往中间增长</p><p>2、判断空栈时要注意top1和top2的指向，要同时满足top1==-1 和 top2==MAXSIZE</p></blockquote><h4 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h4><blockquote><p>1、链头进链头出，链尾进链尾出</p><p>2、链栈有判空没判满</p></blockquote><h4 id="栈的表达式求值"><a href="#栈的表达式求值" class="headerlink" title="栈的表达式求值"></a>栈的表达式求值</h4><blockquote><p>1、前缀表达式(逆波兰表达式)<br>    前缀表达式：就是运算法在两个操作数的前面<br>+ab</p><p>注意：两个操作数的前后顺序不可颠倒</p><p>2、中缀表达式<br>    中缀表达式：就是运算符在两个操作数的中间<br>a+b</p><p>3、后缀表达式(波兰表达式)<br>    后缀表达式：就是运算符在两个操作数的后面<br>ab+</p><p>注意：两个操作数的前后顺序不可颠倒</p><p>4、例子<br>    中缀表达式：a+b-c<br>后缀表达式：ab+c-<br> abc-+<br>前缀表达式：-+abc</p><p>注意：一个中缀多项式可能会转换成多种不一样的后缀表达式</p><p>5、中缀转后缀（手算）<br>    a、确定中缀表达式中各个运算符的运算顺序<br>b、选择下一个运算符，按照【做操作数 有操作数 运算符】的方式组合成一个新的操作数<br>c、如果还有运算符没被处理，就继续②</p><p>“左优先”原则：只要左边的运算符能先计算（考虑运算符的优先级），就优先计算左边的</p><p>6、中缀转后缀(机算)<br>    初始化一个栈，用于保存暂时还不能确定运算符顺序的运算符。<br>从左至右处理各个元素，直到末尾。可能遇到三种情况：<br> a、遇到操作数。直接加入后缀表达式<br>b、遇到界限符。遇到“(” 直接入栈；遇到“)” 则依次弹出栈内运算符并加入后缀表达式，直到弹出”(“ 为止。注意：“(” 不加入后缀表达式。<br>c、遇到运算符。依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到”(“或栈空则停止。之后再把当前运算符入栈。<br>按上述方法处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式。</p><p>7、后缀表达式计算（手算）<br>    从左往右扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应运算，合体为一个操作数</p><p>注意:两个操作数的左右顺序</p><p>8、中缀表达式求值(机算)<br>    核心思想就是：中缀转后缀<br> 后缀表达式求值<br> 两个算法的结合</p><p>用栈实现中缀表达式的计算：<br>初始化两个栈，操作数栈和运算符栈。<br>若扫描到操作数，压入操作数栈。<br>若扫描到运算符或界限符，则按照“中缀转后缀”相同的逻辑压入运算符栈（期间 也会弹出运算符，每当弹出一个运算符时，就需要再弹出两个操作数栈的栈顶元素并执行相应的运算，运算结果再压回操作数栈）</p><p>9、用栈实现后缀表达式的计算<br>    a、从左往右扫描下一个元素，直到处理完所有元素<br>b、若扫描到操作数则压入栈，并回到①，否则执行③<br>c、若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①。</p><p>注意：先出栈的作为“右操作数”</p><p>10、中缀转前缀(手算)<br>    a、确定中缀表达式中各个运算符的运算顺序<br>b、选择下一个运算符，按照【运算符 左操作数 右操作数】的方式组合成一个新的操作数<br>c、如果还有运算符没被处理，就继续②</p><p>“右优先”原则：只要右边的运算符能先计算（考虑运算符的优先级），就优先计算右边的</p><p>11、前缀表达式的计算（手算）<br>    从右往左扫描，每遇到一个运算符，就让运算符前面最近的两个操作数执行对应运算，合体为一个操作数</p><p>注意:两个操作数的左右顺序</p><p>12、用栈实现前缀表达式的计算<br>    a、从右往左扫描下一个元素，直到处理完所有元素<br>b、若扫描到操作数则压入栈，并回到①，否则执行③<br>c、若扫描到运算符，则弹出两个栈顶元素，执行相应运算，运算结果压回栈顶，回到①。</p><p>注意：先出栈的作为“左操作数”</p></blockquote><h2 id="2、操作-1"><a href="#2、操作-1" class="headerlink" title="2、操作"></a>2、操作</h2><h3 id="顺序栈-1"><a href="#顺序栈-1" class="headerlink" title="顺序栈"></a>顺序栈</h3><h4 id="结构体定义-4"><a href="#结构体定义-4" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int top;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h4 id="初始化-9"><a href="#初始化-9" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化 </span><br><span class="line">bool InitStack(SqStack &amp;S)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    S.data[i] &#x3D; 0;</span><br><span class="line"> S.top &#x3D; -1;&#x2F;&#x2F;也可以为0，操作不一样 </span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判空-8"><a href="#判空-8" class="headerlink" title="判空"></a>判空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空 </span><br><span class="line">bool IsEmpty(SqStack S)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;-1)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入栈（插入操作）"><a href="#入栈（插入操作）" class="headerlink" title="入栈（插入操作）"></a>入栈（插入操作）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入栈（插入操作）</span><br><span class="line">bool Push(SqStack &amp;S,int e)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;MAXSIZE-1)&#x2F;&#x2F;栈满 </span><br><span class="line">    return false;</span><br><span class="line"> S.top++;</span><br><span class="line"> S.data[S.top] &#x3D; e;&#x2F;&#x2F;结合上行代码，可变：S.data[++S.top] &#x3D; e; </span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="出栈（删除操作）"><a href="#出栈（删除操作）" class="headerlink" title="出栈（删除操作）"></a>出栈（删除操作）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈（删除操作）</span><br><span class="line">bool Pop(SqStack &amp;S,int &amp;e)&#123;</span><br><span class="line"> if(S.top &#x3D;&#x3D; -1)&#x2F;&#x2F;栈空 </span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S.data[S.top];</span><br><span class="line"> S.data[S.top] &#x3D; 0;</span><br><span class="line"> S.top--;&#x2F;&#x2F;可变：e &#x3D; S.data[S.top--]; </span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="读取栈顶元素"><a href="#读取栈顶元素" class="headerlink" title="读取栈顶元素"></a>读取栈顶元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;读取栈顶元素</span><br><span class="line">bool GetTop(SqStack S,int &amp;e)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;-1)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S.data[S.top];</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="共享栈-1"><a href="#共享栈-1" class="headerlink" title="共享栈"></a>共享栈</h3><h4 id="结构体定义-5"><a href="#结构体定义-5" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int top1;</span><br><span class="line"> int top2;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><h4 id="初始化-10"><a href="#初始化-10" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitStack(SqStack &amp;S)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    S.data[i] &#x3D; 0;</span><br><span class="line"> S.top1 &#x3D; MAXSIZE;</span><br><span class="line"> S.top2 &#x3D; -1;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="判满"><a href="#判满" class="headerlink" title="判满"></a>判满</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判满</span><br><span class="line">bool IsFull(SqStack S)&#123;</span><br><span class="line"> if(S.top1+1 &#x3D;&#x3D; S.top2)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="判空-9"><a href="#判空-9" class="headerlink" title="判空"></a>判空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(SqStack S)&#123;</span><br><span class="line"> if(S.top1 &#x3D;&#x3D; -1 &amp;&amp; S.top2 &#x3D;&#x3D; MAXSIZE)</span><br><span class="line">    return true</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入栈</span><br><span class="line">bool Push(SqStack &amp;S,int e)&#123;</span><br><span class="line"> if(S.top1+1 &#x3D;&#x3D; S.top2)</span><br><span class="line">    return false;</span><br><span class="line"> int num &#x3D; 0;</span><br><span class="line"> printf(&quot;你要在哪一端插入？(top1:1&#x2F;top2:0) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line"> if(num)</span><br><span class="line">    S.data[++S.top1] &#x3D; e;</span><br><span class="line"> else</span><br><span class="line">    S.data[--S.top2] &#x3D; e;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈</span><br><span class="line">bool Pop(SqStack &amp;S,int &amp;e)&#123;</span><br><span class="line"> if(S.top1 &#x3D;&#x3D; -1 &amp;&amp; S.top2 &#x3D;&#x3D; MAXSIZE)</span><br><span class="line">    return false;</span><br><span class="line"> int num &#x3D; 0;</span><br><span class="line"> printf(&quot;你要选择哪一段进行出栈？(top1:1&#x2F;top2:0) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line"> if(num)&#123;</span><br><span class="line">    e &#x3D; S.data[S.top1];</span><br><span class="line">    S.data[S.top1] &#x3D; 0;</span><br><span class="line">    S.top1--;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    e &#x3D; S.data[S.top2];</span><br><span class="line">    S.data[S.top2] &#x3D; 0;</span><br><span class="line">    S.top2++; </span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="链栈-1"><a href="#链栈-1" class="headerlink" title="链栈"></a>链栈</h3><h4 id="结构体定义-6"><a href="#结构体定义-6" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next; </span><br><span class="line">&#125;*LiStack;</span><br></pre></td></tr></table></figure><h4 id="带头结点-4"><a href="#带头结点-4" class="headerlink" title="带头结点"></a>带头结点</h4><h5 id="初始化-11"><a href="#初始化-11" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化 </span><br><span class="line">bool InitStack(LiStack &amp;S)&#123;</span><br><span class="line"> S &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(S&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> S-&gt;next &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入栈-1"><a href="#入栈-1" class="headerlink" title="入栈"></a>入栈</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入栈 </span><br><span class="line">bool Push(LiStack &amp;S,int e)&#123;</span><br><span class="line"> LinkNode *p &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> p-&gt;data &#x3D; e;</span><br><span class="line"> p-&gt;next &#x3D; S-&gt;next;</span><br><span class="line"> S-&gt;next &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出栈-1"><a href="#出栈-1" class="headerlink" title="出栈"></a>出栈</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈 </span><br><span class="line">bool Pop(LiStack &amp;S,int &amp;e)&#123;</span><br><span class="line"> if(S-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *p &#x3D; S-&gt;next;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; p-&gt;data;</span><br><span class="line"> S-&gt;next &#x3D; p-&gt;next;</span><br><span class="line"> free(p);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取栈顶元素"><a href="#获取栈顶元素" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取栈顶元素</span><br><span class="line">bool GetTop(LiStack S,int &amp;e)&#123;</span><br><span class="line"> if(S-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S-&gt;next-&gt;data;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="判空-10"><a href="#判空-10" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(LiStack S)&#123;</span><br><span class="line"> if(S-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="不带头结点（推荐）"><a href="#不带头结点（推荐）" class="headerlink" title="不带头结点（推荐）"></a>不带头结点（推荐）</h4><h5 id="初始化-12"><a href="#初始化-12" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化 </span><br><span class="line">bool InitStack(LiStack &amp;S)&#123;</span><br><span class="line"> S &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入栈-2"><a href="#入栈-2" class="headerlink" title="入栈"></a>入栈</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入栈 </span><br><span class="line">bool Push(LiStack &amp;S,int e)&#123;</span><br><span class="line"> LinkNode *p &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> p-&gt;data &#x3D; e;</span><br><span class="line"> p-&gt;next &#x3D; S;</span><br><span class="line"> S &#x3D; p;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出栈-2"><a href="#出栈-2" class="headerlink" title="出栈"></a>出栈</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出栈 </span><br><span class="line">bool Pop(LiStack &amp;S,int &amp;e)&#123;</span><br><span class="line"> if(S&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *p &#x3D; S;</span><br><span class="line"> if(p&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; p-&gt;data;</span><br><span class="line"> S &#x3D; p-&gt;next;</span><br><span class="line"> free(p);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取栈顶元素-1"><a href="#获取栈顶元素-1" class="headerlink" title="获取栈顶元素"></a>获取栈顶元素</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取栈顶元素</span><br><span class="line">bool GetTop(LiStack S,int &amp;e)&#123;</span><br><span class="line"> if(S&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S-&gt;data;</span><br><span class="line">    return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="判空-11"><a href="#判空-11" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(LiStack S)&#123;</span><br><span class="line"> if(S&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="栈的括号匹配"><a href="#栈的括号匹配" class="headerlink" title="栈的括号匹配"></a>栈的括号匹配</h3><h4 id="算法代码"><a href="#算法代码" class="headerlink" title="算法代码"></a>算法代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">bool bracketCheck(char str[],int length)&#123;</span><br><span class="line"> SqStack S;</span><br><span class="line"> InitStack(S);</span><br><span class="line"> for(int i &#x3D; 0;i&lt;length;i++)&#123;</span><br><span class="line">    if(str[i] &#x3D;&#x3D; &#39;(&#39; || str[i] &#x3D;&#x3D; &#39;[&#39; || str[i] &#x3D;&#x3D; &#39;&#123;&#39; || str[i] &#x3D;&#x3D; &#39;&lt;&#39;)&#123;</span><br><span class="line">        Push(S,str[i]); &#x2F;&#x2F;扫描到左括号，入栈 </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        if(IsEmpty(S))&#x2F;&#x2F;扫描到右括号但是栈空 </span><br><span class="line">            return false;&#x2F;&#x2F;匹配失败 </span><br><span class="line">    &#125;</span><br><span class="line">    if(str[i] &#x3D;&#x3D; &#39;)&#39; || str[i] &#x3D;&#x3D; &#39;]&#39; || str[i] &#x3D;&#x3D; &#39;&#125;&#39; || str[i] &#x3D;&#x3D; &#39;&gt;&#39;)&#123;</span><br><span class="line">        char e ;</span><br><span class="line">        Pop(S,e);</span><br><span class="line">        switch(str[i])&#123;</span><br><span class="line">            case &#39;)&#39;:</span><br><span class="line">            if(e&#x3D;&#x3D;&#39;(&#39;)</span><br><span class="line">                printf(&quot;%c 与 %c 匹配成功！\n&quot;,e,str[i]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;%c 与 %c 匹配失败！\n&quot;,e,str[i]);</span><br><span class="line">            break;</span><br><span class="line">            case &#39;]&#39;:</span><br><span class="line">            if(e&#x3D;&#x3D;&#39;[&#39;)</span><br><span class="line">                printf(&quot;%c 与 %c 匹配成功！\n&quot;,e,str[i]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;%c 与 %c 匹配失败！\n&quot;,e,str[i]); </span><br><span class="line">            break;</span><br><span class="line">            case &#39;&#125;&#39;:</span><br><span class="line">            if(e&#x3D;&#x3D;&#39;&#123;&#39;)</span><br><span class="line">                printf(&quot;%c 与 %c 匹配成功！\n&quot;,e,str[i]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;%c 与 %c 匹配失败！\n&quot;,e,str[i]);</span><br><span class="line">            break;</span><br><span class="line">            case &#39;&gt;&#39;:</span><br><span class="line">            if(e&#x3D;&#x3D;&#39;&lt;&#39;)</span><br><span class="line">                printf(&quot;%c 与 %c 匹配成功！\n&quot;,e,str[i]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;%c 与 %c 匹配失败！\n&quot;,e,str[i]);</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"> char str[] &#x3D; &quot;(((&#123;&#125;&lt;[])))&quot;;</span><br><span class="line"> int length &#x3D; strlen(str);</span><br><span class="line"> bracketCheck(str,length);</span><br><span class="line"> </span><br><span class="line"> return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈的表达式求值-1"><a href="#栈的表达式求值-1" class="headerlink" title="栈的表达式求值"></a>栈的表达式求值</h3><h4 id="中缀转后缀-算法代码"><a href="#中缀转后缀-算法代码" class="headerlink" title="中缀转后缀-算法代码"></a>中缀转后缀-算法代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#define MAXSIZE 20</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> char data[MAXSIZE];</span><br><span class="line"> int top;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"></span><br><span class="line">bool InitStack(SqStack &amp;S)&#123;</span><br><span class="line"> S.top &#x3D; -1;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Push(SqStack &amp;S,char e)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;MAXSIZE-1)</span><br><span class="line">    return false;</span><br><span class="line"> S.data[++S.top] &#x3D; e;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool Pop(SqStack &amp;S,char &amp;e)&#123;</span><br><span class="line"> if(S.top&#x3D;&#x3D;-1)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; S.data[S.top--];</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line"> SqStack S;</span><br><span class="line"> InitStack(S);</span><br><span class="line"> char str[] &#x3D; &quot;((15&#x2F;(7-(1+1)))*3)-(2+(1+1))&quot;;</span><br><span class="line"> char e;</span><br><span class="line"> int length &#x3D; strlen(str);</span><br><span class="line"> for(int i &#x3D; 0;i&lt;length;i++)&#123;</span><br><span class="line">    if(str[i]&gt;&#x3D;&#39;A&#39; &amp;&amp; str[i]&lt;&#x3D;&#39;Z&#39; || str[i]&gt;&#x3D;&#39;a&#39; &amp;&amp; str[i]&lt;&#x3D;&#39;z&#39; || str[i]&gt;&#x3D;&#39;0&#39; &amp;&amp; str[i]&lt;&#x3D;&#39;9&#39;)&#123;&#x2F;&#x2F;操作数 </span><br><span class="line">        printf(&quot;%c&quot;,str[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> if(str[i]&#x3D;&#x3D;&#39;(&#39;)&#123;&#x2F;&#x2F;&quot;(&quot;</span><br><span class="line">    Push(S,str[i]);</span><br><span class="line"> &#125;</span><br><span class="line"> if(str[i]&#x3D;&#x3D;&#39;)&#39;)&#123;&#x2F;&#x2F;&quot;)&quot; </span><br><span class="line">    while(S.data[S.top]!&#x3D;&#39;(&#39; )&#123;</span><br><span class="line">        Pop(S,e);</span><br><span class="line">        printf(&quot;%c&quot;,e);</span><br><span class="line">    &#125;</span><br><span class="line">    Pop(S,e);</span><br><span class="line"> &#125;</span><br><span class="line"> if(str[i]&#x3D;&#x3D;&#39;+&#39; || str[i]&#x3D;&#x3D;&#39;-&#39; || str[i]&#x3D;&#x3D;&#39;*&#39; || str[i]&#x3D;&#x3D;&#39;&#x2F;&#39;)&#123;&#x2F;&#x2F;运算符 </span><br><span class="line">    int level_1 &#x3D; 0;</span><br><span class="line">    int level_2 &#x3D; 0;</span><br><span class="line">    switch(str[i])&#123;</span><br><span class="line">        case &#39;+&#39;:</span><br><span class="line">        case &#39;-&#39;:</span><br><span class="line">            level_1 &#x3D; 1;</span><br><span class="line">        break;</span><br><span class="line">        case &#39;*&#39;:</span><br><span class="line">        case &#39;&#x2F;&#39;:</span><br><span class="line">            level_1 &#x3D; 2;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    switch(S.data[S.top])&#123;</span><br><span class="line">        case &#39;+&#39;:</span><br><span class="line">        case &#39;-&#39;:</span><br><span class="line">            level_2 &#x3D; 1;</span><br><span class="line">        break;</span><br><span class="line">        case &#39;*&#39;:</span><br><span class="line">        case &#39;&#x2F;&#39;:</span><br><span class="line">            level_2 &#x3D; 2;</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">    while(level_1&lt;&#x3D;level_2)&#123;</span><br><span class="line">        if(S.data[S.top]&#x3D;&#x3D;&#39;(&#39; || S.top&#x3D;&#x3D;-1)</span><br><span class="line">            break;</span><br><span class="line">        Pop(S,e);</span><br><span class="line">        printf(&quot;%c&quot;,e);</span><br><span class="line">        if(S.data[S.top]&#x3D;&#x3D;&#39;+&#39; || S.data[S.top]&#x3D;&#x3D;&#39;-&#39;)</span><br><span class="line">            level_2 &#x3D; 1;</span><br><span class="line">        if(S.data[S.top]&#x3D;&#x3D;&#39;*&#39; || S.data[S.top]&#x3D;&#x3D;&#39;&#x2F;&#39;)</span><br><span class="line">            level_1 &#x3D; 2;</span><br><span class="line">    &#125; </span><br><span class="line">    Push(S,str[i]); </span><br><span class="line">  &#125; </span><br><span class="line"> &#125;</span><br><span class="line">    while(S.top!&#x3D;-1)&#123;</span><br><span class="line">        Pop(S,e);</span><br><span class="line">        printf(&quot;%c&quot;,e);&#x2F;&#x2F;依次将在栈中剩余的运算符弹出 </span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序队列-amp-循环队列"><a href="#顺序队列-amp-循环队列" class="headerlink" title="顺序队列 &amp; 循环队列"></a>顺序队列 &amp; 循环队列</h3><h4 id="结构体定义-7"><a href="#结构体定义-7" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int front,rear;&#x2F;&#x2F;队头指针和队尾指针 </span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h4 id="初始化-13"><a href="#初始化-13" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitSqQueue(SqQueue &amp;Q)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    Q.data[i] &#x3D; 0;</span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; 0;&#x2F;&#x2F;同时指向0</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="判空-12"><a href="#判空-12" class="headerlink" title="判空"></a>判空</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判空</span><br><span class="line">bool IsEmpty(SqQueue Q)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判满-1"><a href="#判满-1" class="headerlink" title="判满"></a>判满</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;判满</span><br><span class="line">bool IsFull(SqQueue Q)&#123;</span><br><span class="line"> if((Q.rear+1)%MAXSIZE&#x3D;&#x3D;Q.front)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入队</span><br><span class="line">bool EnQueue(SqQueue &amp;Q,int e)&#123;</span><br><span class="line"> if((Q.rear+1)%MAXSIZE&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判满 </span><br><span class="line">    return false;</span><br><span class="line"> Q.data[Q.rear] &#x3D; e;</span><br><span class="line"> Q.rear &#x3D; (Q.rear+1)%MAXSIZE;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出队</span><br><span class="line">bool DeQueue(SqQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判空</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; Q.data[Q.front];</span><br><span class="line"> Q.data[Q.front] &#x3D; 0;</span><br><span class="line"> Q.front &#x3D; (Q.front+1)%MAXSIZE;</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="获取队头元素"><a href="#获取队头元素" class="headerlink" title="获取队头元素"></a>获取队头元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;获取队头元素值</span><br><span class="line">bool GetHead(SqQueue Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; Q.data[Q.front];</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="队列元素个数"><a href="#队列元素个数" class="headerlink" title="队列元素个数"></a>队列元素个数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;队列元素个数</span><br><span class="line">int GetQueueNum(SqQueue Q)&#123;</span><br><span class="line"> return (Q.rear+MAXSIZE-Q.front)%MAXSIZE;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="链式队列-1"><a href="#链式队列-1" class="headerlink" title="链式队列"></a>链式队列</h3><h4 id="结构体定义-8"><a href="#结构体定义-8" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinnkNode *front,*rear; </span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h4 id="带头结点-5"><a href="#带头结点-5" class="headerlink" title="带头结点"></a>带头结点</h4><h5 id="初始化-14"><a href="#初始化-14" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> &#x2F;&#x2F;初始化时，front、rear都指向头结点 </span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> Q.front-&gt;next &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判空-13"><a href="#判空-13" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(LinkQueue Q)&#123;</span><br><span class="line"> if(Q.front-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.rear-&gt;next &#x3D; s;</span><br><span class="line"> Q.rear &#x3D; s;&#x2F;&#x2F;修改表尾指针 </span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;Q.rear)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *q &#x3D; Q.front-&gt;next;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> Q.front-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;q)&#x2F;&#x2F;最后一个结点出队 </span><br><span class="line">    Q.rear &#x3D; Q.front;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不带头结点-4"><a href="#不带头结点-4" class="headerlink" title="不带头结点"></a>不带头结点</h4><h5 id="初始化-15"><a href="#初始化-15" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="判空-14"><a href="#判空-14" class="headerlink" title="判空"></a>判空</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool IsEmpty(LinkQueue Q)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return true;</span><br><span class="line"> else</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-2"><a href="#入队-2" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> if(s&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; NULL;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">    Q.front &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    Q.rear-&gt;next &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出队-2"><a href="#出队-2" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;Q.rear)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *q &#x3D; Q.front;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> Q.front &#x3D; q-&gt;next;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;q)&#x2F;&#x2F;最后一个结点出队 </span><br><span class="line">    Q.rear &#x3D; NULL;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双端队列-1"><a href="#双端队列-1" class="headerlink" title="双端队列"></a>双端队列</h3><h4 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h4><h5 id="结构体定义-9"><a href="#结构体定义-9" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int front1,rear1;&#x2F;&#x2F;左端队头指针和队尾指针 </span><br><span class="line"> int front2,rear2;&#x2F;&#x2F;右端对头指针和队尾指针 </span><br><span class="line"> int EnNum,DeNum;&#x2F;&#x2F;插入、删除条件值 </span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-16"><a href="#初始化-16" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(SqQueue &amp;Q)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    Q.data[i] &#x3D; -1;</span><br><span class="line"> Q.front1 &#x3D; Q.rear1 &#x3D; 0;</span><br><span class="line"> Q.front2 &#x3D; Q.rear2 &#x3D; MAXSIZE-1;</span><br><span class="line"> Q.EnNum &#x3D; 0;&#x2F;&#x2F;0为左端，1为右端 </span><br><span class="line"> Q.DeNum &#x3D; 0;</span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-3"><a href="#入队-3" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(SqQueue &amp;Q,int e)&#123;</span><br><span class="line"> if(Q.rear1 &#x3D;&#x3D; Q.rear2)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行插入？(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum); </span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    int index &#x3D; MAXSIZE-1;</span><br><span class="line">    while(Q.data[index]!&#x3D;-1)</span><br><span class="line">        index--;</span><br><span class="line">    if(index&#x3D;&#x3D;MAXSIZE-1)</span><br><span class="line">         Q.data[Q.rear2] &#x3D; e;</span><br><span class="line">    else&#123;</span><br><span class="line">        for(int i &#x3D; index;i&lt;Q.front2;i++)&#123;</span><br><span class="line">        Q.data[i] &#x3D; Q.data[i+1];</span><br><span class="line">        Q.rear2--;</span><br><span class="line">        Q.data[Q.front2] &#x3D; e;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125; </span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    int index &#x3D; 0;</span><br><span class="line">    while(Q.data[index]!&#x3D;-1)</span><br><span class="line">        index++;</span><br><span class="line">    if(index&#x3D;&#x3D;0)</span><br><span class="line">        Q.data[Q.rear1] &#x3D; e;</span><br><span class="line">    else&#123;</span><br><span class="line">        for(int i &#x3D; index;i&gt;Q.front1;i--)&#123;</span><br><span class="line">        Q.data[i] &#x3D; Q.data[i-1];</span><br><span class="line">        Q.rear1++;</span><br><span class="line">        Q.data[Q.front1] &#x3D; e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="出队-3"><a href="#出队-3" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(SqQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.data[Q.front1]&#x3D;&#x3D;-1 &amp;&amp; Q.data[Q.front2]&#x3D;&#x3D;-1)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除？(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    if(Q.data[Q.front2]!&#x3D;-1)&#123;</span><br><span class="line">        e &#x3D; Q.data[Q.front2];</span><br><span class="line">        for(int i &#x3D; Q.front2;i&gt;Q.rear2;i--)</span><br><span class="line">            Q.data[i] &#x3D; Q.data[i-1];</span><br><span class="line">        Q.data[Q.rear2] &#x3D; -1;</span><br><span class="line">        if(Q.rear2!&#x3D;Q.front2)</span><br><span class="line">            Q.rear2++;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int index &#x3D; MAXSIZE-1;</span><br><span class="line">        while(Q.data[index]&#x3D;&#x3D;-1)</span><br><span class="line">            index--;</span><br><span class="line">        e &#x3D; Q.data[index];</span><br><span class="line">        Q.data[index] &#x3D; -1;</span><br><span class="line">        Q.rear1--;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    if(Q.data[Q.front1]!&#x3D;-1)&#123;</span><br><span class="line">    e &#x3D; Q.data[Q.front1];</span><br><span class="line">    for(int i &#x3D; 0;i&lt;Q.rear1;i++)</span><br><span class="line">        Q.data[i] &#x3D; Q.data[i+1];</span><br><span class="line">    Q.data[Q.rear1] &#x3D; -1;</span><br><span class="line">    if(Q.rear1!&#x3D;Q.front1)</span><br><span class="line">        Q.rear1--;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        int index &#x3D; 0;</span><br><span class="line">        while(Q.data[index]&#x3D;&#x3D;-1)</span><br><span class="line">            index++;</span><br><span class="line">        e &#x3D; Q.data[index];</span><br><span class="line">        Q.data[index] &#x3D; -1;</span><br><span class="line">        Q.rear2++;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h4><h5 id="带头结点-6"><a href="#带头结点-6" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="结构体定义-10"><a href="#结构体定义-10" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum,DeNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-17"><a href="#初始化-17" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> &#x2F;&#x2F;初始化时，front、rear都指向头结点 </span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> Q.front-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.DeNum &#x3D; Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-4"><a href="#入队-4" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> printf(&quot;在哪端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    Q.rear-&gt;next &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; Q.front-&gt;next;</span><br><span class="line">    Q.front-&gt;next &#x3D; s;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-4"><a href="#出队-4" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.rear;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    while(p-&gt;next!&#x3D;q)</span><br><span class="line">        p &#x3D; p-&gt;next;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    p-&gt;next&#x3D;NULL;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.rear &#x3D; p;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    LinkNode *q &#x3D; Q.front-&gt;next;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line">    free(q);</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不带头结点-5"><a href="#不带头结点-5" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="结构体定义-11"><a href="#结构体定义-11" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum,DeNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-18"><a href="#初始化-18" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> Q.DeNum &#x3D; Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-5"><a href="#入队-5" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> printf(&quot;在哪端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s; </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        Q.rear-&gt;next &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        s-&gt;next &#x3D; NULL;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        s-&gt;next &#x3D; Q.front;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-5"><a href="#出队-5" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.rear;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    if(p-&gt;next&#x3D;&#x3D;q-&gt;next)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; NULL;</span><br><span class="line">        Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        while(p-&gt;next!&#x3D;q)</span><br><span class="line">            p &#x3D; p-&gt;next;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        p-&gt;next&#x3D;NULL;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.rear &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.front;</span><br><span class="line">    LinkNode *p &#x3D; Q.front-&gt;next;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;Q.rear)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.front &#x3D; NULL;</span><br><span class="line">    Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输入受限双端队列"><a href="#输入受限双端队列" class="headerlink" title="输入受限双端队列"></a>输入受限双端队列</h3><h4 id="顺序存储-1"><a href="#顺序存储-1" class="headerlink" title="顺序存储"></a>顺序存储</h4><h5 id="结构体定义-12"><a href="#结构体定义-12" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int front,rear;&#x2F;&#x2F;队头指针和队尾指针 </span><br><span class="line"> int DeNum;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-19"><a href="#初始化-19" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool InitSqQueue(SqQueue &amp;Q)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    Q.data[i] &#x3D; -1;</span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; 0;&#x2F;&#x2F;同时指向0</span><br><span class="line"> Q.DeNum &#x3D; 0;</span><br><span class="line"> return true; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="入队-6"><a href="#入队-6" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入队</span><br><span class="line">bool EnQueue(SqQueue &amp;Q,int e)&#123;</span><br><span class="line"> if((Q.rear+1)%MAXSIZE&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判满 </span><br><span class="line">    return false;</span><br><span class="line"> Q.data[Q.rear] &#x3D; e;</span><br><span class="line"> Q.rear &#x3D; (Q.rear+1)%MAXSIZE;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出队-6"><a href="#出队-6" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出队</span><br><span class="line">bool DeQueue(SqQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判空</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪一端进行删除？(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    e &#x3D; Q.data[Q.rear-1];</span><br><span class="line">    Q.data[Q.rear-1] &#x3D; -1;</span><br><span class="line">    Q.rear &#x3D; (Q.rear-1)%MAXSIZE;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    e &#x3D; Q.data[Q.front];</span><br><span class="line">    Q.data[Q.front] &#x3D; -1;</span><br><span class="line">    Q.front &#x3D; (Q.front+1)%MAXSIZE;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="链式存储-1"><a href="#链式存储-1" class="headerlink" title="链式存储"></a>链式存储</h4><h5 id="带头结点-7"><a href="#带头结点-7" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="结构体定义-13"><a href="#结构体定义-13" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int DeNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列</span><br></pre></td></tr></table></figure><h6 id="初始化-20"><a href="#初始化-20" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> Q.front-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.DeNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h6 id="入队-7"><a href="#入队-7" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.rear-&gt;next &#x3D; s;</span><br><span class="line"> Q.rear &#x3D; s;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-7"><a href="#出队-7" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.rear;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    if(p-&gt;next&#x3D;&#x3D;q-&gt;next)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; NULL;</span><br><span class="line">        Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        while(p-&gt;next!&#x3D;q)</span><br><span class="line">            p &#x3D; p-&gt;next;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        p-&gt;next&#x3D;NULL;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.rear &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line"> LinkNode *q &#x3D; Q.front;</span><br><span class="line"> LinkNode *p &#x3D; Q.front-&gt;next;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;Q.rear)&#123;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.front &#x3D; NULL;</span><br><span class="line">    Q.rear &#x3D; NULL;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.front &#x3D; p;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不带头结点-6"><a href="#不带头结点-6" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="结构体定义-14"><a href="#结构体定义-14" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum,DeNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-21"><a href="#初始化-21" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-8"><a href="#入队-8" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> s-&gt;data &#x3D; e;</span><br><span class="line"> s-&gt;next &#x3D; NULL;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">    Q.front &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    Q.rear-&gt;next &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-8"><a href="#出队-8" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪端进行删除:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.DeNum);</span><br><span class="line"> if(Q.DeNum)&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.rear;</span><br><span class="line">    LinkNode *p &#x3D; Q.front;</span><br><span class="line">    if(p-&gt;next&#x3D;&#x3D;q-&gt;next)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; NULL;</span><br><span class="line">        Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        while(p-&gt;next!&#x3D;q)</span><br><span class="line">            p &#x3D; p-&gt;next;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        p-&gt;next&#x3D;NULL;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.rear &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *q &#x3D; Q.front;</span><br><span class="line">    LinkNode *p &#x3D; Q.front-&gt;next;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;Q.rear)&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; NULL;</span><br><span class="line">        Q.rear &#x3D; NULL;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        e &#x3D; q-&gt;data;</span><br><span class="line">        free(q);</span><br><span class="line">        Q.front &#x3D; p;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出受限双端队列"><a href="#输出受限双端队列" class="headerlink" title="输出受限双端队列"></a>输出受限双端队列</h3><h4 id="顺序存储-2"><a href="#顺序存储-2" class="headerlink" title="顺序存储"></a>顺序存储</h4><h5 id="结构体定义-15"><a href="#结构体定义-15" class="headerlink" title="结构体定义"></a>结构体定义</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define MAXSIZE 10</span><br><span class="line">typedef struct &#123;</span><br><span class="line"> int data[MAXSIZE];</span><br><span class="line"> int front,rear;&#x2F;&#x2F;队头指针和队尾指针 </span><br><span class="line"> int EnNum;</span><br><span class="line">&#125;SqQueue;</span><br></pre></td></tr></table></figure><h5 id="初始化-22"><a href="#初始化-22" class="headerlink" title="初始化"></a>初始化</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">bool InitSqQueue(SqQueue &amp;Q)&#123;</span><br><span class="line"> for(int i &#x3D; 0;i&lt;MAXSIZE;i++)</span><br><span class="line">    Q.data[i] &#x3D; -1;</span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; 0;&#x2F;&#x2F;同时指向0</span><br><span class="line"> Q.EnNum &#x3D; 0;</span><br><span class="line"> return true; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="入队-9"><a href="#入队-9" class="headerlink" title="入队"></a>入队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;入队</span><br><span class="line">bool EnQueue(SqQueue &amp;Q,int e)&#123;</span><br><span class="line"> if((Q.rear+1)%MAXSIZE&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判满 </span><br><span class="line">    return false;</span><br><span class="line"> printf(&quot;在哪一端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    Q.data[Q.rear] &#x3D; e;</span><br><span class="line">    Q.rear &#x3D; (Q.rear+1)%MAXSIZE;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    for(int i &#x3D; Q.rear;i&gt;Q.front;i--)</span><br><span class="line">         Q.data[i] &#x3D; Q.data[i-1];</span><br><span class="line">     Q.rear &#x3D; (Q.rear+1)%MAXSIZE;</span><br><span class="line">    Q.data[Q.front] &#x3D; e;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h5 id="出队-9"><a href="#出队-9" class="headerlink" title="出队"></a>出队</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;出队</span><br><span class="line">bool DeQueue(SqQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.rear&#x3D;&#x3D;Q.front)&#x2F;&#x2F;判空</span><br><span class="line">    return false;</span><br><span class="line"> e &#x3D; Q.data[Q.rear-1];</span><br><span class="line"> Q.data[Q.rear-1] &#x3D; -1;</span><br><span class="line"> Q.rear &#x3D; (Q.rear-1)%MAXSIZE;</span><br><span class="line"> return true;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="链式存储-2"><a href="#链式存储-2" class="headerlink" title="链式存储"></a>链式存储</h4><h5 id="带头结点-8"><a href="#带头结点-8" class="headerlink" title="带头结点"></a>带头结点</h5><h6 id="结构体定义-16"><a href="#结构体定义-16" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-23"><a href="#初始化-23" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> &#x2F;&#x2F;初始化时，front、rear都指向头结点 </span><br><span class="line"> Q.front &#x3D; Q.rear &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line"> Q.front-&gt;next &#x3D; NULL;</span><br><span class="line"> Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-10"><a href="#入队-10" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> printf(&quot;在哪端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    Q.rear-&gt;next &#x3D; s;</span><br><span class="line">    Q.rear &#x3D; s;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; Q.front-&gt;next;</span><br><span class="line">    Q.front-&gt;next &#x3D; s;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-10"><a href="#出队-10" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front-&gt;next&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *p &#x3D; Q.front;</span><br><span class="line"> LinkNode *q &#x3D; Q.front-&gt;next;</span><br><span class="line"> e &#x3D; q-&gt;data;</span><br><span class="line"> p-&gt;next &#x3D; q-&gt;next;</span><br><span class="line"> free(q);</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="不带头结点-7"><a href="#不带头结点-7" class="headerlink" title="不带头结点"></a>不带头结点</h5><h6 id="结构体定义-17"><a href="#结构体定义-17" class="headerlink" title="结构体定义"></a>结构体定义</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">typedef struct LinkNode&#123;</span><br><span class="line"> int data;</span><br><span class="line"> struct LinkNode *next;</span><br><span class="line">&#125;LinkNode;&#x2F;&#x2F;链式队列结点</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"> LinkNode *front,*rear; </span><br><span class="line"> int EnNum;</span><br><span class="line">&#125;LinkQueue;&#x2F;&#x2F;链式队列 </span><br></pre></td></tr></table></figure><h6 id="初始化-24"><a href="#初始化-24" class="headerlink" title="初始化"></a>初始化</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">bool InitQueue(LinkQueue &amp;Q)&#123;</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> Q.EnNum &#x3D; 0;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="入队-11"><a href="#入队-11" class="headerlink" title="入队"></a>入队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">bool EnQueue(LinkQueue &amp;Q,int e)&#123;</span><br><span class="line"> printf(&quot;在哪端进行插入:(左:0&#x2F;右:1) \n&quot;);</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;Q.EnNum);</span><br><span class="line"> if(Q.EnNum)&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    s-&gt;next &#x3D; NULL;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s; </span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        Q.rear-&gt;next &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    LinkNode *s &#x3D; (LinkNode *)malloc(sizeof(LinkNode));</span><br><span class="line">    s-&gt;data &#x3D; e;</span><br><span class="line">    if(Q.front&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">        s-&gt;next &#x3D; NULL;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">        Q.rear &#x3D; s;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        s-&gt;next &#x3D; Q.front;</span><br><span class="line">        Q.front &#x3D; s;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="出队-11"><a href="#出队-11" class="headerlink" title="出队"></a>出队</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">bool DeQueue(LinkQueue &amp;Q,int &amp;e)&#123;</span><br><span class="line"> if(Q.front&#x3D;&#x3D;NULL)</span><br><span class="line">    return false;</span><br><span class="line"> LinkNode *q &#x3D; Q.front;</span><br><span class="line"> LinkNode *p &#x3D; Q.front-&gt;next;</span><br><span class="line"> if(q-&gt;next&#x3D;&#x3D;NULL)&#123;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line"> free(q);</span><br><span class="line"> Q.front &#x3D; NULL;</span><br><span class="line"> Q.rear &#x3D; NULL;</span><br><span class="line"> &#125;else&#123;</span><br><span class="line">    e &#x3D; q-&gt;data;</span><br><span class="line">    free(q);</span><br><span class="line">    Q.front &#x3D; p;</span><br><span class="line"> &#125;</span><br><span class="line"> return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第四章·串"><a href="#第四章·串" class="headerlink" title="第四章·串"></a>第四章·串</h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
